// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGMsgRpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SGMsgRpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SGMsgRpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SGMsgRpc_2eproto SGPROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct SGPROTOBUF_API TableStruct_SGMsgRpc_2eproto {
  static const uint32_t offsets[];
};
SGPROTOBUF_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SGMsgRpc_2eproto;
namespace SGMsg {
class RpcContentCheck;
struct RpcContentCheckDefaultTypeInternal;
SGPROTOBUF_API extern RpcContentCheckDefaultTypeInternal _RpcContentCheck_default_instance_;
class RpcCrossTest;
struct RpcCrossTestDefaultTypeInternal;
SGPROTOBUF_API extern RpcCrossTestDefaultTypeInternal _RpcCrossTest_default_instance_;
class RpcDelayTest;
struct RpcDelayTestDefaultTypeInternal;
SGPROTOBUF_API extern RpcDelayTestDefaultTypeInternal _RpcDelayTest_default_instance_;
class RpcTest;
struct RpcTestDefaultTypeInternal;
SGPROTOBUF_API extern RpcTestDefaultTypeInternal _RpcTest_default_instance_;
}  // namespace SGMsg
PROTOBUF_NAMESPACE_OPEN
template<> SGPROTOBUF_API ::SGMsg::RpcContentCheck* Arena::CreateMaybeMessage<::SGMsg::RpcContentCheck>(Arena*);
template<> SGPROTOBUF_API ::SGMsg::RpcCrossTest* Arena::CreateMaybeMessage<::SGMsg::RpcCrossTest>(Arena*);
template<> SGPROTOBUF_API ::SGMsg::RpcDelayTest* Arena::CreateMaybeMessage<::SGMsg::RpcDelayTest>(Arena*);
template<> SGPROTOBUF_API ::SGMsg::RpcTest* Arena::CreateMaybeMessage<::SGMsg::RpcTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SGMsg {

// ===================================================================

class SGPROTOBUF_API RpcTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGMsg.RpcTest) */ {
 public:
  inline RpcTest() : RpcTest(nullptr) {}
  ~RpcTest() override;
  explicit PROTOBUF_CONSTEXPR RpcTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTest(const RpcTest& from);
  RpcTest(RpcTest&& from) noexcept
    : RpcTest() {
    *this = ::std::move(from);
  }

  inline RpcTest& operator=(const RpcTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTest& operator=(RpcTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTest* internal_default_instance() {
    return reinterpret_cast<const RpcTest*>(
               &_RpcTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcTest& a, RpcTest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcTest& from) {
    RpcTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGMsg.RpcTest";
  }
  protected:
  explicit RpcTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgReqStrFieldNumber = 2,
    kMsgReplyStrFieldNumber = 4,
    kMsgRequesteFieldNumber = 1,
    kMsgReplyFieldNumber = 3,
    kErrorCodeFieldNumber = 5,
  };
  // optional string msg_req_str = 2;
  bool has_msg_req_str() const;
  private:
  bool _internal_has_msg_req_str() const;
  public:
  void clear_msg_req_str();
  const std::string& msg_req_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_req_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_req_str();
  PROTOBUF_NODISCARD std::string* release_msg_req_str();
  void set_allocated_msg_req_str(std::string* msg_req_str);
  private:
  const std::string& _internal_msg_req_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_req_str(const std::string& value);
  std::string* _internal_mutable_msg_req_str();
  public:

  // optional string msg_reply_str = 4;
  bool has_msg_reply_str() const;
  private:
  bool _internal_has_msg_reply_str() const;
  public:
  void clear_msg_reply_str();
  const std::string& msg_reply_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_reply_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_reply_str();
  PROTOBUF_NODISCARD std::string* release_msg_reply_str();
  void set_allocated_msg_reply_str(std::string* msg_reply_str);
  private:
  const std::string& _internal_msg_reply_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_reply_str(const std::string& value);
  std::string* _internal_mutable_msg_reply_str();
  public:

  // optional int32 msg_requeste = 1;
  bool has_msg_requeste() const;
  private:
  bool _internal_has_msg_requeste() const;
  public:
  void clear_msg_requeste();
  int32_t msg_requeste() const;
  void set_msg_requeste(int32_t value);
  private:
  int32_t _internal_msg_requeste() const;
  void _internal_set_msg_requeste(int32_t value);
  public:

  // optional int32 msg_reply = 3;
  bool has_msg_reply() const;
  private:
  bool _internal_has_msg_reply() const;
  public:
  void clear_msg_reply();
  int32_t msg_reply() const;
  void set_msg_reply(int32_t value);
  private:
  int32_t _internal_msg_reply() const;
  void _internal_set_msg_reply(int32_t value);
  public:

  // optional int32 error_code = 5;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SGMsg.RpcTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_req_str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_reply_str_;
    int32_t msg_requeste_;
    int32_t msg_reply_;
    int32_t error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SGMsgRpc_2eproto;
};
// -------------------------------------------------------------------

class SGPROTOBUF_API RpcDelayTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGMsg.RpcDelayTest) */ {
 public:
  inline RpcDelayTest() : RpcDelayTest(nullptr) {}
  ~RpcDelayTest() override;
  explicit PROTOBUF_CONSTEXPR RpcDelayTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcDelayTest(const RpcDelayTest& from);
  RpcDelayTest(RpcDelayTest&& from) noexcept
    : RpcDelayTest() {
    *this = ::std::move(from);
  }

  inline RpcDelayTest& operator=(const RpcDelayTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcDelayTest& operator=(RpcDelayTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcDelayTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcDelayTest* internal_default_instance() {
    return reinterpret_cast<const RpcDelayTest*>(
               &_RpcDelayTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcDelayTest& a, RpcDelayTest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcDelayTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcDelayTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcDelayTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcDelayTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcDelayTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcDelayTest& from) {
    RpcDelayTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcDelayTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGMsg.RpcDelayTest";
  }
  protected:
  explicit RpcDelayTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPermissionFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 permission = 2;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  int32_t permission() const;
  void set_permission(int32_t value);
  private:
  int32_t _internal_permission() const;
  void _internal_set_permission(int32_t value);
  public:

  // optional int32 error_code = 3;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SGMsg.RpcDelayTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t permission_;
    int32_t error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SGMsgRpc_2eproto;
};
// -------------------------------------------------------------------

class SGPROTOBUF_API RpcContentCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGMsg.RpcContentCheck) */ {
 public:
  inline RpcContentCheck() : RpcContentCheck(nullptr) {}
  ~RpcContentCheck() override;
  explicit PROTOBUF_CONSTEXPR RpcContentCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcContentCheck(const RpcContentCheck& from);
  RpcContentCheck(RpcContentCheck&& from) noexcept
    : RpcContentCheck() {
    *this = ::std::move(from);
  }

  inline RpcContentCheck& operator=(const RpcContentCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcContentCheck& operator=(RpcContentCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcContentCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcContentCheck* internal_default_instance() {
    return reinterpret_cast<const RpcContentCheck*>(
               &_RpcContentCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcContentCheck& a, RpcContentCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcContentCheck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcContentCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcContentCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcContentCheck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcContentCheck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcContentCheck& from) {
    RpcContentCheck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcContentCheck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGMsg.RpcContentCheck";
  }
  protected:
  explicit RpcContentCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentToCheckFieldNumber = 1,
    kContentReplyFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // repeated string content_to_check = 1;
  int content_to_check_size() const;
  private:
  int _internal_content_to_check_size() const;
  public:
  void clear_content_to_check();
  const std::string& content_to_check(int index) const;
  std::string* mutable_content_to_check(int index);
  void set_content_to_check(int index, const std::string& value);
  void set_content_to_check(int index, std::string&& value);
  void set_content_to_check(int index, const char* value);
  void set_content_to_check(int index, const char* value, size_t size);
  std::string* add_content_to_check();
  void add_content_to_check(const std::string& value);
  void add_content_to_check(std::string&& value);
  void add_content_to_check(const char* value);
  void add_content_to_check(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& content_to_check() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_content_to_check();
  private:
  const std::string& _internal_content_to_check(int index) const;
  std::string* _internal_add_content_to_check();
  public:

  // repeated string content_reply = 2;
  int content_reply_size() const;
  private:
  int _internal_content_reply_size() const;
  public:
  void clear_content_reply();
  const std::string& content_reply(int index) const;
  std::string* mutable_content_reply(int index);
  void set_content_reply(int index, const std::string& value);
  void set_content_reply(int index, std::string&& value);
  void set_content_reply(int index, const char* value);
  void set_content_reply(int index, const char* value, size_t size);
  std::string* add_content_reply();
  void add_content_reply(const std::string& value);
  void add_content_reply(std::string&& value);
  void add_content_reply(const char* value);
  void add_content_reply(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& content_reply() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_content_reply();
  private:
  const std::string& _internal_content_reply(int index) const;
  std::string* _internal_add_content_reply();
  public:

  // repeated int32 error_code = 3;
  int error_code_size() const;
  private:
  int _internal_error_code_size() const;
  public:
  void clear_error_code();
  private:
  int32_t _internal_error_code(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_error_code() const;
  void _internal_add_error_code(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_error_code();
  public:
  int32_t error_code(int index) const;
  void set_error_code(int index, int32_t value);
  void add_error_code(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      error_code() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_error_code();

  // @@protoc_insertion_point(class_scope:SGMsg.RpcContentCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> content_to_check_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> content_reply_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SGMsgRpc_2eproto;
};
// -------------------------------------------------------------------

class SGPROTOBUF_API RpcCrossTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGMsg.RpcCrossTest) */ {
 public:
  inline RpcCrossTest() : RpcCrossTest(nullptr) {}
  ~RpcCrossTest() override;
  explicit PROTOBUF_CONSTEXPR RpcCrossTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcCrossTest(const RpcCrossTest& from);
  RpcCrossTest(RpcCrossTest&& from) noexcept
    : RpcCrossTest() {
    *this = ::std::move(from);
  }

  inline RpcCrossTest& operator=(const RpcCrossTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcCrossTest& operator=(RpcCrossTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcCrossTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcCrossTest* internal_default_instance() {
    return reinterpret_cast<const RpcCrossTest*>(
               &_RpcCrossTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcCrossTest& a, RpcCrossTest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcCrossTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcCrossTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcCrossTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcCrossTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcCrossTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcCrossTest& from) {
    RpcCrossTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcCrossTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGMsg.RpcCrossTest";
  }
  protected:
  explicit RpcCrossTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestdataFieldNumber = 1,
    kReplyDataFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // optional string testdata = 1;
  bool has_testdata() const;
  private:
  bool _internal_has_testdata() const;
  public:
  void clear_testdata();
  const std::string& testdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testdata();
  PROTOBUF_NODISCARD std::string* release_testdata();
  void set_allocated_testdata(std::string* testdata);
  private:
  const std::string& _internal_testdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testdata(const std::string& value);
  std::string* _internal_mutable_testdata();
  public:

  // optional string replyData = 2;
  bool has_replydata() const;
  private:
  bool _internal_has_replydata() const;
  public:
  void clear_replydata();
  const std::string& replydata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replydata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replydata();
  PROTOBUF_NODISCARD std::string* release_replydata();
  void set_allocated_replydata(std::string* replydata);
  private:
  const std::string& _internal_replydata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replydata(const std::string& value);
  std::string* _internal_mutable_replydata();
  public:

  // optional int32 error_code = 3;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SGMsg.RpcCrossTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replydata_;
    int32_t error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SGMsgRpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcTest

// optional int32 msg_requeste = 1;
inline bool RpcTest::_internal_has_msg_requeste() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcTest::has_msg_requeste() const {
  return _internal_has_msg_requeste();
}
inline void RpcTest::clear_msg_requeste() {
  _impl_.msg_requeste_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RpcTest::_internal_msg_requeste() const {
  return _impl_.msg_requeste_;
}
inline int32_t RpcTest::msg_requeste() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcTest.msg_requeste)
  return _internal_msg_requeste();
}
inline void RpcTest::_internal_set_msg_requeste(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.msg_requeste_ = value;
}
inline void RpcTest::set_msg_requeste(int32_t value) {
  _internal_set_msg_requeste(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcTest.msg_requeste)
}

// optional string msg_req_str = 2;
inline bool RpcTest::_internal_has_msg_req_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcTest::has_msg_req_str() const {
  return _internal_has_msg_req_str();
}
inline void RpcTest::clear_msg_req_str() {
  _impl_.msg_req_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcTest::msg_req_str() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcTest.msg_req_str)
  return _internal_msg_req_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTest::set_msg_req_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_req_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SGMsg.RpcTest.msg_req_str)
}
inline std::string* RpcTest::mutable_msg_req_str() {
  std::string* _s = _internal_mutable_msg_req_str();
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcTest.msg_req_str)
  return _s;
}
inline const std::string& RpcTest::_internal_msg_req_str() const {
  return _impl_.msg_req_str_.Get();
}
inline void RpcTest::_internal_set_msg_req_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_req_str_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcTest::_internal_mutable_msg_req_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_req_str_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcTest::release_msg_req_str() {
  // @@protoc_insertion_point(field_release:SGMsg.RpcTest.msg_req_str)
  if (!_internal_has_msg_req_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_req_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_req_str_.IsDefault()) {
    _impl_.msg_req_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcTest::set_allocated_msg_req_str(std::string* msg_req_str) {
  if (msg_req_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_req_str_.SetAllocated(msg_req_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_req_str_.IsDefault()) {
    _impl_.msg_req_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SGMsg.RpcTest.msg_req_str)
}

// optional int32 msg_reply = 3;
inline bool RpcTest::_internal_has_msg_reply() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcTest::has_msg_reply() const {
  return _internal_has_msg_reply();
}
inline void RpcTest::clear_msg_reply() {
  _impl_.msg_reply_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t RpcTest::_internal_msg_reply() const {
  return _impl_.msg_reply_;
}
inline int32_t RpcTest::msg_reply() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcTest.msg_reply)
  return _internal_msg_reply();
}
inline void RpcTest::_internal_set_msg_reply(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.msg_reply_ = value;
}
inline void RpcTest::set_msg_reply(int32_t value) {
  _internal_set_msg_reply(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcTest.msg_reply)
}

// optional string msg_reply_str = 4;
inline bool RpcTest::_internal_has_msg_reply_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcTest::has_msg_reply_str() const {
  return _internal_has_msg_reply_str();
}
inline void RpcTest::clear_msg_reply_str() {
  _impl_.msg_reply_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcTest::msg_reply_str() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcTest.msg_reply_str)
  return _internal_msg_reply_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTest::set_msg_reply_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.msg_reply_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SGMsg.RpcTest.msg_reply_str)
}
inline std::string* RpcTest::mutable_msg_reply_str() {
  std::string* _s = _internal_mutable_msg_reply_str();
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcTest.msg_reply_str)
  return _s;
}
inline const std::string& RpcTest::_internal_msg_reply_str() const {
  return _impl_.msg_reply_str_.Get();
}
inline void RpcTest::_internal_set_msg_reply_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_reply_str_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcTest::_internal_mutable_msg_reply_str() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.msg_reply_str_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcTest::release_msg_reply_str() {
  // @@protoc_insertion_point(field_release:SGMsg.RpcTest.msg_reply_str)
  if (!_internal_has_msg_reply_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.msg_reply_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_reply_str_.IsDefault()) {
    _impl_.msg_reply_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcTest::set_allocated_msg_reply_str(std::string* msg_reply_str) {
  if (msg_reply_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.msg_reply_str_.SetAllocated(msg_reply_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_reply_str_.IsDefault()) {
    _impl_.msg_reply_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SGMsg.RpcTest.msg_reply_str)
}

// optional int32 error_code = 5;
inline bool RpcTest::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcTest::has_error_code() const {
  return _internal_has_error_code();
}
inline void RpcTest::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t RpcTest::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RpcTest::error_code() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcTest.error_code)
  return _internal_error_code();
}
inline void RpcTest::_internal_set_error_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.error_code_ = value;
}
inline void RpcTest::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcTest.error_code)
}

// -------------------------------------------------------------------

// RpcDelayTest

// optional string name = 1;
inline bool RpcDelayTest::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcDelayTest::has_name() const {
  return _internal_has_name();
}
inline void RpcDelayTest::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcDelayTest::name() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcDelayTest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcDelayTest::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SGMsg.RpcDelayTest.name)
}
inline std::string* RpcDelayTest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcDelayTest.name)
  return _s;
}
inline const std::string& RpcDelayTest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RpcDelayTest::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcDelayTest::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcDelayTest::release_name() {
  // @@protoc_insertion_point(field_release:SGMsg.RpcDelayTest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcDelayTest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SGMsg.RpcDelayTest.name)
}

// optional int32 permission = 2;
inline bool RpcDelayTest::_internal_has_permission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcDelayTest::has_permission() const {
  return _internal_has_permission();
}
inline void RpcDelayTest::clear_permission() {
  _impl_.permission_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RpcDelayTest::_internal_permission() const {
  return _impl_.permission_;
}
inline int32_t RpcDelayTest::permission() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcDelayTest.permission)
  return _internal_permission();
}
inline void RpcDelayTest::_internal_set_permission(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.permission_ = value;
}
inline void RpcDelayTest::set_permission(int32_t value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcDelayTest.permission)
}

// optional int32 error_code = 3;
inline bool RpcDelayTest::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcDelayTest::has_error_code() const {
  return _internal_has_error_code();
}
inline void RpcDelayTest::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RpcDelayTest::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RpcDelayTest::error_code() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcDelayTest.error_code)
  return _internal_error_code();
}
inline void RpcDelayTest::_internal_set_error_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_code_ = value;
}
inline void RpcDelayTest::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcDelayTest.error_code)
}

// -------------------------------------------------------------------

// RpcContentCheck

// repeated string content_to_check = 1;
inline int RpcContentCheck::_internal_content_to_check_size() const {
  return _impl_.content_to_check_.size();
}
inline int RpcContentCheck::content_to_check_size() const {
  return _internal_content_to_check_size();
}
inline void RpcContentCheck::clear_content_to_check() {
  _impl_.content_to_check_.Clear();
}
inline std::string* RpcContentCheck::add_content_to_check() {
  std::string* _s = _internal_add_content_to_check();
  // @@protoc_insertion_point(field_add_mutable:SGMsg.RpcContentCheck.content_to_check)
  return _s;
}
inline const std::string& RpcContentCheck::_internal_content_to_check(int index) const {
  return _impl_.content_to_check_.Get(index);
}
inline const std::string& RpcContentCheck::content_to_check(int index) const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcContentCheck.content_to_check)
  return _internal_content_to_check(index);
}
inline std::string* RpcContentCheck::mutable_content_to_check(int index) {
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcContentCheck.content_to_check)
  return _impl_.content_to_check_.Mutable(index);
}
inline void RpcContentCheck::set_content_to_check(int index, const std::string& value) {
  _impl_.content_to_check_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::set_content_to_check(int index, std::string&& value) {
  _impl_.content_to_check_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::set_content_to_check(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_to_check_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::set_content_to_check(int index, const char* value, size_t size) {
  _impl_.content_to_check_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SGMsg.RpcContentCheck.content_to_check)
}
inline std::string* RpcContentCheck::_internal_add_content_to_check() {
  return _impl_.content_to_check_.Add();
}
inline void RpcContentCheck::add_content_to_check(const std::string& value) {
  _impl_.content_to_check_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::add_content_to_check(std::string&& value) {
  _impl_.content_to_check_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::add_content_to_check(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_to_check_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SGMsg.RpcContentCheck.content_to_check)
}
inline void RpcContentCheck::add_content_to_check(const char* value, size_t size) {
  _impl_.content_to_check_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SGMsg.RpcContentCheck.content_to_check)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcContentCheck::content_to_check() const {
  // @@protoc_insertion_point(field_list:SGMsg.RpcContentCheck.content_to_check)
  return _impl_.content_to_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcContentCheck::mutable_content_to_check() {
  // @@protoc_insertion_point(field_mutable_list:SGMsg.RpcContentCheck.content_to_check)
  return &_impl_.content_to_check_;
}

// repeated string content_reply = 2;
inline int RpcContentCheck::_internal_content_reply_size() const {
  return _impl_.content_reply_.size();
}
inline int RpcContentCheck::content_reply_size() const {
  return _internal_content_reply_size();
}
inline void RpcContentCheck::clear_content_reply() {
  _impl_.content_reply_.Clear();
}
inline std::string* RpcContentCheck::add_content_reply() {
  std::string* _s = _internal_add_content_reply();
  // @@protoc_insertion_point(field_add_mutable:SGMsg.RpcContentCheck.content_reply)
  return _s;
}
inline const std::string& RpcContentCheck::_internal_content_reply(int index) const {
  return _impl_.content_reply_.Get(index);
}
inline const std::string& RpcContentCheck::content_reply(int index) const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcContentCheck.content_reply)
  return _internal_content_reply(index);
}
inline std::string* RpcContentCheck::mutable_content_reply(int index) {
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcContentCheck.content_reply)
  return _impl_.content_reply_.Mutable(index);
}
inline void RpcContentCheck::set_content_reply(int index, const std::string& value) {
  _impl_.content_reply_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::set_content_reply(int index, std::string&& value) {
  _impl_.content_reply_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::set_content_reply(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_reply_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::set_content_reply(int index, const char* value, size_t size) {
  _impl_.content_reply_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SGMsg.RpcContentCheck.content_reply)
}
inline std::string* RpcContentCheck::_internal_add_content_reply() {
  return _impl_.content_reply_.Add();
}
inline void RpcContentCheck::add_content_reply(const std::string& value) {
  _impl_.content_reply_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::add_content_reply(std::string&& value) {
  _impl_.content_reply_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::add_content_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_reply_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SGMsg.RpcContentCheck.content_reply)
}
inline void RpcContentCheck::add_content_reply(const char* value, size_t size) {
  _impl_.content_reply_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SGMsg.RpcContentCheck.content_reply)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcContentCheck::content_reply() const {
  // @@protoc_insertion_point(field_list:SGMsg.RpcContentCheck.content_reply)
  return _impl_.content_reply_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcContentCheck::mutable_content_reply() {
  // @@protoc_insertion_point(field_mutable_list:SGMsg.RpcContentCheck.content_reply)
  return &_impl_.content_reply_;
}

// repeated int32 error_code = 3;
inline int RpcContentCheck::_internal_error_code_size() const {
  return _impl_.error_code_.size();
}
inline int RpcContentCheck::error_code_size() const {
  return _internal_error_code_size();
}
inline void RpcContentCheck::clear_error_code() {
  _impl_.error_code_.Clear();
}
inline int32_t RpcContentCheck::_internal_error_code(int index) const {
  return _impl_.error_code_.Get(index);
}
inline int32_t RpcContentCheck::error_code(int index) const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcContentCheck.error_code)
  return _internal_error_code(index);
}
inline void RpcContentCheck::set_error_code(int index, int32_t value) {
  _impl_.error_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcContentCheck.error_code)
}
inline void RpcContentCheck::_internal_add_error_code(int32_t value) {
  _impl_.error_code_.Add(value);
}
inline void RpcContentCheck::add_error_code(int32_t value) {
  _internal_add_error_code(value);
  // @@protoc_insertion_point(field_add:SGMsg.RpcContentCheck.error_code)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RpcContentCheck::_internal_error_code() const {
  return _impl_.error_code_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RpcContentCheck::error_code() const {
  // @@protoc_insertion_point(field_list:SGMsg.RpcContentCheck.error_code)
  return _internal_error_code();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RpcContentCheck::_internal_mutable_error_code() {
  return &_impl_.error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RpcContentCheck::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable_list:SGMsg.RpcContentCheck.error_code)
  return _internal_mutable_error_code();
}

// -------------------------------------------------------------------

// RpcCrossTest

// optional string testdata = 1;
inline bool RpcCrossTest::_internal_has_testdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcCrossTest::has_testdata() const {
  return _internal_has_testdata();
}
inline void RpcCrossTest::clear_testdata() {
  _impl_.testdata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcCrossTest::testdata() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcCrossTest.testdata)
  return _internal_testdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcCrossTest::set_testdata(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.testdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SGMsg.RpcCrossTest.testdata)
}
inline std::string* RpcCrossTest::mutable_testdata() {
  std::string* _s = _internal_mutable_testdata();
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcCrossTest.testdata)
  return _s;
}
inline const std::string& RpcCrossTest::_internal_testdata() const {
  return _impl_.testdata_.Get();
}
inline void RpcCrossTest::_internal_set_testdata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.testdata_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCrossTest::_internal_mutable_testdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.testdata_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcCrossTest::release_testdata() {
  // @@protoc_insertion_point(field_release:SGMsg.RpcCrossTest.testdata)
  if (!_internal_has_testdata()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.testdata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testdata_.IsDefault()) {
    _impl_.testdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcCrossTest::set_allocated_testdata(std::string* testdata) {
  if (testdata != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.testdata_.SetAllocated(testdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testdata_.IsDefault()) {
    _impl_.testdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SGMsg.RpcCrossTest.testdata)
}

// optional string replyData = 2;
inline bool RpcCrossTest::_internal_has_replydata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcCrossTest::has_replydata() const {
  return _internal_has_replydata();
}
inline void RpcCrossTest::clear_replydata() {
  _impl_.replydata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcCrossTest::replydata() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcCrossTest.replyData)
  return _internal_replydata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcCrossTest::set_replydata(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.replydata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SGMsg.RpcCrossTest.replyData)
}
inline std::string* RpcCrossTest::mutable_replydata() {
  std::string* _s = _internal_mutable_replydata();
  // @@protoc_insertion_point(field_mutable:SGMsg.RpcCrossTest.replyData)
  return _s;
}
inline const std::string& RpcCrossTest::_internal_replydata() const {
  return _impl_.replydata_.Get();
}
inline void RpcCrossTest::_internal_set_replydata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.replydata_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCrossTest::_internal_mutable_replydata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.replydata_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcCrossTest::release_replydata() {
  // @@protoc_insertion_point(field_release:SGMsg.RpcCrossTest.replyData)
  if (!_internal_has_replydata()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.replydata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replydata_.IsDefault()) {
    _impl_.replydata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcCrossTest::set_allocated_replydata(std::string* replydata) {
  if (replydata != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.replydata_.SetAllocated(replydata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replydata_.IsDefault()) {
    _impl_.replydata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SGMsg.RpcCrossTest.replyData)
}

// optional int32 error_code = 3;
inline bool RpcCrossTest::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcCrossTest::has_error_code() const {
  return _internal_has_error_code();
}
inline void RpcCrossTest::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RpcCrossTest::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RpcCrossTest::error_code() const {
  // @@protoc_insertion_point(field_get:SGMsg.RpcCrossTest.error_code)
  return _internal_error_code();
}
inline void RpcCrossTest::_internal_set_error_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_code_ = value;
}
inline void RpcCrossTest::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:SGMsg.RpcCrossTest.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SGMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SGMsgRpc_2eproto
