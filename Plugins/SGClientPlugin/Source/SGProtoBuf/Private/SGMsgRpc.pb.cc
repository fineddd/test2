// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGMsgRpc.proto

#include "SGMsgRpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SGMsg {
PROTOBUF_CONSTEXPR RpcTest::RpcTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_req_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_reply_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_requeste_)*/0
  , /*decltype(_impl_.msg_reply_)*/0
  , /*decltype(_impl_.error_code_)*/0} {}
struct RpcTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcTestDefaultTypeInternal() {}
  union {
    RpcTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcTestDefaultTypeInternal _RpcTest_default_instance_;
PROTOBUF_CONSTEXPR RpcDelayTest::RpcDelayTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/0
  , /*decltype(_impl_.error_code_)*/0} {}
struct RpcDelayTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcDelayTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcDelayTestDefaultTypeInternal() {}
  union {
    RpcDelayTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcDelayTestDefaultTypeInternal _RpcDelayTest_default_instance_;
PROTOBUF_CONSTEXPR RpcContentCheck::RpcContentCheck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_to_check_)*/{}
  , /*decltype(_impl_.content_reply_)*/{}
  , /*decltype(_impl_.error_code_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcContentCheckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcContentCheckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcContentCheckDefaultTypeInternal() {}
  union {
    RpcContentCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcContentCheckDefaultTypeInternal _RpcContentCheck_default_instance_;
PROTOBUF_CONSTEXPR RpcCrossTest::RpcCrossTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.testdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replydata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0} {}
struct RpcCrossTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcCrossTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcCrossTestDefaultTypeInternal() {}
  union {
    RpcCrossTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcCrossTestDefaultTypeInternal _RpcCrossTest_default_instance_;
}  // namespace SGMsg
static ::_pb::Metadata file_level_metadata_SGMsgRpc_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SGMsgRpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SGMsgRpc_2eproto = nullptr;

const uint32_t TableStruct_SGMsgRpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_.msg_requeste_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_.msg_req_str_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_.msg_reply_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_.msg_reply_str_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcTest, _impl_.error_code_),
  2,
  0,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcDelayTest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcDelayTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcDelayTest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcDelayTest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcDelayTest, _impl_.error_code_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcContentCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcContentCheck, _impl_.content_to_check_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcContentCheck, _impl_.content_reply_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcContentCheck, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcCrossTest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcCrossTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcCrossTest, _impl_.testdata_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcCrossTest, _impl_.replydata_),
  PROTOBUF_FIELD_OFFSET(::SGMsg::RpcCrossTest, _impl_.error_code_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::SGMsg::RpcTest)},
  { 16, 25, -1, sizeof(::SGMsg::RpcDelayTest)},
  { 28, -1, -1, sizeof(::SGMsg::RpcContentCheck)},
  { 37, 46, -1, sizeof(::SGMsg::RpcCrossTest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SGMsg::_RpcTest_default_instance_._instance,
  &::SGMsg::_RpcDelayTest_default_instance_._instance,
  &::SGMsg::_RpcContentCheck_default_instance_._instance,
  &::SGMsg::_RpcCrossTest_default_instance_._instance,
};

const char descriptor_table_protodef_SGMsgRpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SGMsgRpc.proto\022\005SGMsg\"r\n\007RpcTest\022\024\n\014ms"
  "g_requeste\030\001 \001(\005\022\023\n\013msg_req_str\030\002 \001(\t\022\021\n"
  "\tmsg_reply\030\003 \001(\005\022\025\n\rmsg_reply_str\030\004 \001(\t\022"
  "\022\n\nerror_code\030\005 \001(\005\"D\n\014RpcDelayTest\022\014\n\004n"
  "ame\030\001 \001(\t\022\022\n\npermission\030\002 \001(\005\022\022\n\nerror_c"
  "ode\030\003 \001(\005\"V\n\017RpcContentCheck\022\030\n\020content_"
  "to_check\030\001 \003(\t\022\025\n\rcontent_reply\030\002 \003(\t\022\022\n"
  "\nerror_code\030\003 \003(\005\"G\n\014RpcCrossTest\022\020\n\010tes"
  "tdata\030\001 \001(\t\022\021\n\treplyData\030\002 \001(\t\022\022\n\nerror_"
  "code\030\003 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_SGMsgRpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SGMsgRpc_2eproto = {
    false, false, 370, descriptor_table_protodef_SGMsgRpc_2eproto,
    "SGMsgRpc.proto",
    &descriptor_table_SGMsgRpc_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_SGMsgRpc_2eproto::offsets,
    file_level_metadata_SGMsgRpc_2eproto, file_level_enum_descriptors_SGMsgRpc_2eproto,
    file_level_service_descriptors_SGMsgRpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SGMsgRpc_2eproto_getter() {
  return &descriptor_table_SGMsgRpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SGMsgRpc_2eproto(&descriptor_table_SGMsgRpc_2eproto);
namespace SGMsg {

// ===================================================================

class RpcTest::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcTest>()._impl_._has_bits_);
  static void set_has_msg_requeste(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msg_req_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg_reply_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RpcTest::RpcTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SGMsg.RpcTest)
}
RpcTest::RpcTest(const RpcTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_req_str_){}
    , decltype(_impl_.msg_reply_str_){}
    , decltype(_impl_.msg_requeste_){}
    , decltype(_impl_.msg_reply_){}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_req_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_req_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg_req_str()) {
    _this->_impl_.msg_req_str_.Set(from._internal_msg_req_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_reply_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_reply_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg_reply_str()) {
    _this->_impl_.msg_reply_str_.Set(from._internal_msg_reply_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msg_requeste_, &from._impl_.msg_requeste_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.msg_requeste_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:SGMsg.RpcTest)
}

inline void RpcTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_req_str_){}
    , decltype(_impl_.msg_reply_str_){}
    , decltype(_impl_.msg_requeste_){0}
    , decltype(_impl_.msg_reply_){0}
    , decltype(_impl_.error_code_){0}
  };
  _impl_.msg_req_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_req_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_reply_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_reply_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcTest::~RpcTest() {
  // @@protoc_insertion_point(destructor:SGMsg.RpcTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_req_str_.Destroy();
  _impl_.msg_reply_str_.Destroy();
}

void RpcTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcTest::Clear() {
// @@protoc_insertion_point(message_clear_start:SGMsg.RpcTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_req_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msg_reply_str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.msg_requeste_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_code_) -
        reinterpret_cast<char*>(&_impl_.msg_requeste_)) + sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msg_requeste = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_requeste(&has_bits);
          _impl_.msg_requeste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg_req_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg_req_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SGMsg.RpcTest.msg_req_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 msg_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_msg_reply(&has_bits);
          _impl_.msg_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg_reply_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg_reply_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SGMsg.RpcTest.msg_reply_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGMsg.RpcTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 msg_requeste = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_requeste(), target);
  }

  // optional string msg_req_str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_req_str().data(), static_cast<int>(this->_internal_msg_req_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcTest.msg_req_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_req_str(), target);
  }

  // optional int32 msg_reply = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_msg_reply(), target);
  }

  // optional string msg_reply_str = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_reply_str().data(), static_cast<int>(this->_internal_msg_reply_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcTest.msg_reply_str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg_reply_str(), target);
  }

  // optional int32 error_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGMsg.RpcTest)
  return target;
}

size_t RpcTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGMsg.RpcTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string msg_req_str = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_req_str());
    }

    // optional string msg_reply_str = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_reply_str());
    }

    // optional int32 msg_requeste = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_requeste());
    }

    // optional int32 msg_reply = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_reply());
    }

    // optional int32 error_code = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcTest::GetClassData() const { return &_class_data_; }


void RpcTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcTest*>(&to_msg);
  auto& from = static_cast<const RpcTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SGMsg.RpcTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg_req_str(from._internal_msg_req_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_msg_reply_str(from._internal_msg_reply_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.msg_requeste_ = from._impl_.msg_requeste_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.msg_reply_ = from._impl_.msg_reply_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.error_code_ = from._impl_.error_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcTest::CopyFrom(const RpcTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGMsg.RpcTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcTest::IsInitialized() const {
  return true;
}

void RpcTest::InternalSwap(RpcTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_req_str_, lhs_arena,
      &other->_impl_.msg_req_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_reply_str_, lhs_arena,
      &other->_impl_.msg_reply_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcTest, _impl_.error_code_)
      + sizeof(RpcTest::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RpcTest, _impl_.msg_requeste_)>(
          reinterpret_cast<char*>(&_impl_.msg_requeste_),
          reinterpret_cast<char*>(&other->_impl_.msg_requeste_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SGMsgRpc_2eproto_getter, &descriptor_table_SGMsgRpc_2eproto_once,
      file_level_metadata_SGMsgRpc_2eproto[0]);
}

// ===================================================================

class RpcDelayTest::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcDelayTest>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RpcDelayTest::RpcDelayTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SGMsg.RpcDelayTest)
}
RpcDelayTest::RpcDelayTest(const RpcDelayTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcDelayTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.permission_){}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.permission_, &from._impl_.permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.permission_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:SGMsg.RpcDelayTest)
}

inline void RpcDelayTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.permission_){0}
    , decltype(_impl_.error_code_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcDelayTest::~RpcDelayTest() {
  // @@protoc_insertion_point(destructor:SGMsg.RpcDelayTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcDelayTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RpcDelayTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcDelayTest::Clear() {
// @@protoc_insertion_point(message_clear_start:SGMsg.RpcDelayTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_code_) -
        reinterpret_cast<char*>(&_impl_.permission_)) + sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcDelayTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SGMsg.RpcDelayTest.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_permission(&has_bits);
          _impl_.permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcDelayTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGMsg.RpcDelayTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcDelayTest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_permission(), target);
  }

  // optional int32 error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGMsg.RpcDelayTest)
  return target;
}

size_t RpcDelayTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGMsg.RpcDelayTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 permission = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_permission());
    }

    // optional int32 error_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcDelayTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcDelayTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcDelayTest::GetClassData() const { return &_class_data_; }


void RpcDelayTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcDelayTest*>(&to_msg);
  auto& from = static_cast<const RpcDelayTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SGMsg.RpcDelayTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.permission_ = from._impl_.permission_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_code_ = from._impl_.error_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcDelayTest::CopyFrom(const RpcDelayTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGMsg.RpcDelayTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcDelayTest::IsInitialized() const {
  return true;
}

void RpcDelayTest::InternalSwap(RpcDelayTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcDelayTest, _impl_.error_code_)
      + sizeof(RpcDelayTest::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RpcDelayTest, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcDelayTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SGMsgRpc_2eproto_getter, &descriptor_table_SGMsgRpc_2eproto_once,
      file_level_metadata_SGMsgRpc_2eproto[1]);
}

// ===================================================================

class RpcContentCheck::_Internal {
 public:
};

RpcContentCheck::RpcContentCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SGMsg.RpcContentCheck)
}
RpcContentCheck::RpcContentCheck(const RpcContentCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcContentCheck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_to_check_){from._impl_.content_to_check_}
    , decltype(_impl_.content_reply_){from._impl_.content_reply_}
    , decltype(_impl_.error_code_){from._impl_.error_code_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SGMsg.RpcContentCheck)
}

inline void RpcContentCheck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_to_check_){arena}
    , decltype(_impl_.content_reply_){arena}
    , decltype(_impl_.error_code_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RpcContentCheck::~RpcContentCheck() {
  // @@protoc_insertion_point(destructor:SGMsg.RpcContentCheck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcContentCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_to_check_.~RepeatedPtrField();
  _impl_.content_reply_.~RepeatedPtrField();
  _impl_.error_code_.~RepeatedField();
}

void RpcContentCheck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcContentCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:SGMsg.RpcContentCheck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_to_check_.Clear();
  _impl_.content_reply_.Clear();
  _impl_.error_code_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcContentCheck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string content_to_check = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_content_to_check();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SGMsg.RpcContentCheck.content_to_check");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string content_reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_content_reply();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SGMsg.RpcContentCheck.content_reply");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_error_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_error_code(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcContentCheck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGMsg.RpcContentCheck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string content_to_check = 1;
  for (int i = 0, n = this->_internal_content_to_check_size(); i < n; i++) {
    const auto& s = this->_internal_content_to_check(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcContentCheck.content_to_check");
    target = stream->WriteString(1, s, target);
  }

  // repeated string content_reply = 2;
  for (int i = 0, n = this->_internal_content_reply_size(); i < n; i++) {
    const auto& s = this->_internal_content_reply(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcContentCheck.content_reply");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 error_code = 3;
  for (int i = 0, n = this->_internal_error_code_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGMsg.RpcContentCheck)
  return target;
}

size_t RpcContentCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGMsg.RpcContentCheck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string content_to_check = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.content_to_check_.size());
  for (int i = 0, n = _impl_.content_to_check_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.content_to_check_.Get(i));
  }

  // repeated string content_reply = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.content_reply_.size());
  for (int i = 0, n = _impl_.content_reply_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.content_reply_.Get(i));
  }

  // repeated int32 error_code = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.error_code_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_error_code_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcContentCheck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcContentCheck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcContentCheck::GetClassData() const { return &_class_data_; }


void RpcContentCheck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcContentCheck*>(&to_msg);
  auto& from = static_cast<const RpcContentCheck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SGMsg.RpcContentCheck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_to_check_.MergeFrom(from._impl_.content_to_check_);
  _this->_impl_.content_reply_.MergeFrom(from._impl_.content_reply_);
  _this->_impl_.error_code_.MergeFrom(from._impl_.error_code_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcContentCheck::CopyFrom(const RpcContentCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGMsg.RpcContentCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcContentCheck::IsInitialized() const {
  return true;
}

void RpcContentCheck::InternalSwap(RpcContentCheck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_to_check_.InternalSwap(&other->_impl_.content_to_check_);
  _impl_.content_reply_.InternalSwap(&other->_impl_.content_reply_);
  _impl_.error_code_.InternalSwap(&other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcContentCheck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SGMsgRpc_2eproto_getter, &descriptor_table_SGMsgRpc_2eproto_once,
      file_level_metadata_SGMsgRpc_2eproto[2]);
}

// ===================================================================

class RpcCrossTest::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcCrossTest>()._impl_._has_bits_);
  static void set_has_testdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_replydata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RpcCrossTest::RpcCrossTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SGMsg.RpcCrossTest)
}
RpcCrossTest::RpcCrossTest(const RpcCrossTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcCrossTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.testdata_){}
    , decltype(_impl_.replydata_){}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.testdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_testdata()) {
    _this->_impl_.testdata_.Set(from._internal_testdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.replydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_replydata()) {
    _this->_impl_.replydata_.Set(from._internal_replydata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:SGMsg.RpcCrossTest)
}

inline void RpcCrossTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.testdata_){}
    , decltype(_impl_.replydata_){}
    , decltype(_impl_.error_code_){0}
  };
  _impl_.testdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.replydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcCrossTest::~RpcCrossTest() {
  // @@protoc_insertion_point(destructor:SGMsg.RpcCrossTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcCrossTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testdata_.Destroy();
  _impl_.replydata_.Destroy();
}

void RpcCrossTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcCrossTest::Clear() {
// @@protoc_insertion_point(message_clear_start:SGMsg.RpcCrossTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.testdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.replydata_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcCrossTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string testdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_testdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SGMsg.RpcCrossTest.testdata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string replyData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_replydata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SGMsg.RpcCrossTest.replyData");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcCrossTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGMsg.RpcCrossTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string testdata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_testdata().data(), static_cast<int>(this->_internal_testdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcCrossTest.testdata");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testdata(), target);
  }

  // optional string replyData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replydata().data(), static_cast<int>(this->_internal_replydata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SGMsg.RpcCrossTest.replyData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_replydata(), target);
  }

  // optional int32 error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGMsg.RpcCrossTest)
  return target;
}

size_t RpcCrossTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGMsg.RpcCrossTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string testdata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_testdata());
    }

    // optional string replyData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replydata());
    }

    // optional int32 error_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcCrossTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcCrossTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcCrossTest::GetClassData() const { return &_class_data_; }


void RpcCrossTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcCrossTest*>(&to_msg);
  auto& from = static_cast<const RpcCrossTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SGMsg.RpcCrossTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_testdata(from._internal_testdata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_replydata(from._internal_replydata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_code_ = from._impl_.error_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcCrossTest::CopyFrom(const RpcCrossTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGMsg.RpcCrossTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCrossTest::IsInitialized() const {
  return true;
}

void RpcCrossTest::InternalSwap(RpcCrossTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testdata_, lhs_arena,
      &other->_impl_.testdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.replydata_, lhs_arena,
      &other->_impl_.replydata_, rhs_arena
  );
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcCrossTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SGMsgRpc_2eproto_getter, &descriptor_table_SGMsgRpc_2eproto_once,
      file_level_metadata_SGMsgRpc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SGMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SGMsg::RpcTest*
Arena::CreateMaybeMessage< ::SGMsg::RpcTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGMsg::RpcTest >(arena);
}
template<> PROTOBUF_NOINLINE ::SGMsg::RpcDelayTest*
Arena::CreateMaybeMessage< ::SGMsg::RpcDelayTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGMsg::RpcDelayTest >(arena);
}
template<> PROTOBUF_NOINLINE ::SGMsg::RpcContentCheck*
Arena::CreateMaybeMessage< ::SGMsg::RpcContentCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGMsg::RpcContentCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::SGMsg::RpcCrossTest*
Arena::CreateMaybeMessage< ::SGMsg::RpcCrossTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGMsg::RpcCrossTest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
