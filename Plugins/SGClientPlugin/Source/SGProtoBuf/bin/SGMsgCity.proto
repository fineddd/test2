syntax = "proto2";

package SGMsg;

import "SGMsgBase.proto";
import "SGMsgRank.proto";

//	MSG_C2S_REQ_CREATE_BUILDING			 	 = 2021;
message C2SReqCreateBuilding
{
	required int64 config_id			 	 = 1;	//build表的id
}

// MSG_C2S_REQ_UPGRADE_BUILDING_LEVEL		 = 2023;
message C2SReqUpgradeBuildingLevel 
{
	required GUID building_id				 = 1;
	required bool by_gold					 = 2;
}

// MSG_C2S_REQ_CANCEL_UPGRADE_BUILDING_LEVEL		 = 2024;
message C2SReqCancelUpgradeBuildingLevel 
{
	required GUID building_id				 = 1;
}

// MSG_C2S_REQ_CREATE_FURNITURE                = 2022; //创建家具
message C2SReqCreateFurniture
{
	required GUID building_id		 = 1;	//建筑ID
	required int64 config_id		 = 2;	//家具配置ID
}

// MSG_C2S_REQ_UPGRADE_FURNITURE_LEVEL         = 2026; //升级家具
message C2SReqUpgradeFurnitureLevel
{
	optional GUID furniture_id		= 1;	//家具GUID
}

// MSG_S2C_NTF_REFRESH_FURNITURE               = 2040; // 通知前端刷新建筑家具属性获取
message S2CNtfRefreshFurniture
{
	optional int64 building_config_id		 = 1;	//建筑配置ID
}

// MSG_C2S_REQ_SPEEDUP_BUILDING_STATUS		 = 2025;
message C2SReqSpeedupBuildingStatus 
{
	required GUID building_id				 = 1;
	optional int64 status 					 = 2;
	optional bool by_gold 					 = 3; //是否通过消耗金条立即完成
	repeated ItemInfo use_items				 = 4; //是否通过消耗道具立即完成
	optional ItemInfo buy_item				 = 5; //是否通过购买并消耗道具立即完成
	optional int64 client_data				 = 6; //前端提示用，回传
}

message GuardHouseHeroInfo
{
	optional int32 index					 = 1;
	optional int64 hero_id					 = 2;
}

// MSG_C2S_REQ_LOAD_GUARDHOUSE_HERO			 = 2027;
message C2SReqLoadGuardHouseHero 
{
	required GUID building_id				 = 1;
	optional int32 index					 = 2;//废弃
	optional int64 hero_id					 = 3;//废弃

	optional int64 car_id					 = 4;// 废弃
	repeated GuardHouseHeroInfo heroinfo_list= 5;
}

// MSG_C2S_REQ_OUTFIRE_GUARDHOUSE			 = 2028;
message C2SReqOutfireGuardHouse 
{
	required GUID building_id				 = 1;
	required bool by_gold					 = 2;
}

// MSG_C2S_REQ_REPAIR_GUARDHOUSE			 = 2029;
message C2SReqRepairGuardHouse 
{
	required GUID building_id				 = 1;
	optional int32 repair_all 			     = 2; //是否修复全部 0:否 1:是
}

message SoldierData
{
	required int64 soldier_id		 = 1;	//士兵id
	required int32 soldier_num		 = 2;	//数量
}

// MSG_C2S_REQ_CURE_WOUNDED_SOLDIER			 = 2030;
message C2SReqCureWoundedSoldier 
{
	required GUID building_id				 = 1;
	repeated SoldierData cure_list 			 = 2;
	required bool by_gold					 = 3; //废弃
}

// MSG_C2S_REQ_GET_CURED_SOLDIER			 = 2031;
message C2SReqGetCuredSoldier 
{
	required GUID building_id				 = 1;
}

// MSG_S2C_NTF_HOSPITAL						 = 2032;
message S2CNtfHospital 
{
	required int64 total_wounded_num 		 = 1;
	repeated SoldierData wounded_list 		 = 2;
	repeated SoldierData curing_list 		 = 3; //废弃
	optional int64 today_cured_num 		 	 = 4;
}

// MSG_C2S_REQ_TRAIN_SOLDIER				 = 2033;
message C2SReqTrainSoldier
{
	required GUID building_id				 = 1;
	required SoldierData train_info 		 = 2;
	repeated SoldierData promote_list 		 = 3; //如果不传就是没有
	required bool by_gold					 = 4;
}

// MSG_C2S_REQ_GET_TRAINED_SOLDIER			 = 2034;
message C2SReqGetTrainedSoldier
{
	required GUID building_id				 = 1;
}

// MSG_C2S_REQ_CANCEL_TRAIN_SOLDIER			 = 2035;
message C2SReqCancelTrainSoldier
{
	required GUID building_id				 = 1;
}

// MSG_S2C_NTF_BARRACK						 = 2036;
message S2CNtfBarrack 
{
	required GUID buidling_id 				 = 1;
	required SoldierData train_info 		 = 2;
	repeated SoldierData promote_list 		 = 3;
}

// MSG_S2C_NTF_BARRACKS						 = 2037;
message S2CNtfBarracks 
{
	repeated S2CNtfBarrack barrack_list 	 = 1;
}

// MSG_GS2SS_NTF_BUILD_TOWER					= 2038;
message GS2SSBuildTower
{
	required int32 type 						= 1;		// 类型 1.创建 2.升级
	optional int32 maxHP 						= 2;		// 最大HP
	optional int32 maxAttack 					= 3;		// 最大攻击力
	optional int32 nLevel						= 4;		// 等级
}

// MSG_C2S_REQ_COLLECT_RESOURCE     		   = 2039;
message C2SReqCollectResource
{
	required GUID building_id					= 1;
}

// MSG_C2S_REQ_STUDY_TECH						= 2044;
message C2SReqStudyTech
{
	required GUID building_id					= 1;		// 建筑ID
	required int64 tech_id 						= 2;		// 科技ID
	required bool by_gold 						= 3;		// 立即完成
	optional int32 status						= 4;		// 状态
}

// MSG_C2S_REQ_GET_STUDIED_TECH					= 2045;
message C2SReqGetStudiedTech
{
	required GUID building_id					= 1;		// 建筑ID
	optional int32 status 						= 2;		// 状态
}

// MSG_C2S_REQ_CANCEL_STUDY_TECH			 = 2046;
message C2SReqCancelStudyTech
{
	required GUID building_id				 = 1;
}

//MSG_C2S_REQ_DELETE_TACTICAL_BUILDING 			= 2044;
message C2SReqDeleteTacticalBuilding
{
	required GUID xBuildID 				= 1;
}

//MSG_SS2GS_COMPLETE_TACTICAL_BUILD				= 7156;// 完成战术建筑
message SS2GSCompleteTacticalBuilding
{	
	required int32 type					= 1;// 1 创建 2 删除
	required GUID xBuildID 				= 2;
	optional int64 config_id			= 3;
}

//MSG_S2C_NTF_TACTICAL_RESULT			= 2045;	// 战术建筑相关通知
message S2CNTFTacticalResult
{	
	required int32 result				= 1;
	required int32 type					= 2;// 1 创建 2 删除
	required GUID xBuildID 				= 3;
	optional int64 config_id			= 4;
}

// MSG_C2S_REQ_TACTICAL_SOLDIER			 = 2049;// 战术建筑治疗/招募
message C2SReqTacticalSoldier 
{
	required GUID building_id				 = 1;
	repeated SoldierData soldier_list 			 = 2;
	required bool by_gold					 = 3;
	required int32  type				 	 = 4; // 0 治疗 1 招募
}

// MSG_S2C_ACK_TACTICAL_SOLDIER			// 战术建筑治疗/招募
message S2CAckTacticalSoldier 
{
	required GUID building_id				 = 1;
	repeated SoldierData soldier_list 		 = 2;
	optional bool by_gold					 = 3;
	optional int32  type				 	 = 4; // 0 治疗 1 招募
	required int32 result					 = 5;
	optional int64 curingEndTime			 = 6;
	optional int64 curingStartTime			 = 7;// 治疗开始时间
}
// MSG_S2C_NTF_TACTICAL_INFO						 = 2049;
message S2CNtfTactical
{
	repeated SoldierData wounded_list 		 = 1;// 伤兵
	repeated SoldierData curing_list 		 = 2;// 治疗队伍
	repeated SoldierData cured_list 		 = 3;// 治疗完成
	
	repeated SoldierData dead_list 		 	 = 4;// 死亡
	repeated SoldierData recruited_list 	 = 5;// 招募完成

	required GUID xBuilding			 		 = 7;// 建筑ID
	optional int64 curingEndTime			 = 8;// 治疗结束时间
	optional int64 curingStartTime			 = 9;// 治疗开始时间
}

message ModifiedCarObj
{
	optional GUID xCarID					=1;// 车ID
	optional GUID xBuildID 					=2;// 战术建筑ID		
	optional Point2D cur_position 			=3;// 位置
	optional int32 status					=4;// 状态
	optional int64 nCompleteTime			=5;// 修建完成时间
}

message TacticalBuildObj
{
	optional GUID xBuildID 					=1;//战术建筑ID				
	optional Point2D building_position 		=2;//位置
	optional int64 nStartBuildTime			=3;//开始建造时间
	optional int64 nBuildEndTime			=4;//结束建造时间
	optional int64 nHp						=5;//hp
	optional int64 nDestoryTime				=6;//摧毁时间
	optional int32 nBuildState				=7;//战术建筑状态
	optional int64 nBuildConfig				=8;//战术建筑状态
	optional ModifiedCarObj xCarObj 		=9;//改装车车信息 
	optional int64 nBuildSpeed				=10;//战术建筑速度
}

message TacticalBuildSaveInfo
{
	repeated TacticalBuildObj BuildObj		=1;//建筑信息	
}


// MSG_C2S_REQ_TACTICAL_SOLDIER_INFO						
message C2SReqTacticalSoldierInfo
{	
	required GUID xBuilding			 		 = 1;// 建筑ID
}

// MSG_SS2GS_TACTICAL_SOLDIER_OPERATER			= 7157;	// 战术建筑治疗/招募
message SS2GSTacticalSoldierOperater
{	
	optional int32 result					= 1;
	required int32 type						= 2;//
	required int64 build_configID				= 3;
	repeated SoldierData soldier_list 		= 4;
	required bool by_gold					= 5;
	optional int64 time						= 6;
	required GUID cityID					= 7;
	optional GUID xBuilding					= 8;
}

//MSG_C2S_REQ_TACTICAL_MAKE_PRODUCT
message C2SReqTacticalMakeProduct
{	
	required GUID xBuildID					= 1;
	required int64 ConfigID					= 2;
}

//MSG_SS2GS_TACTICAL_MAKE_PRODUCT
message SS2GSRPCTacticalMakeProduct
{	
	required GUID xBuildID					= 1;
	required int64 ConfigID					= 2;
	optional int32 result					= 3;
	required GUID xCityID					= 4;
}

//MSG_C2S_REQ_TACTICAL_TAKE_PRODUCT
message C2SReqTacticalTakeProduct
{	
	required GUID xBuildID					= 1;
}

//	MSG_S2C_NTF_FINISH_CREATE_BUILDING					 = 2061; //创建建筑完成,在BuildingList
message S2CNtfFinishCreateBuilding
{
	required GUID building_id				 = 1;	//创建完成建筑ID
}

//	MSG_S2C_NTF_FINISH_UPGRADE_BUILDING					 = 2062; //升级建筑完成
message S2CNtfFinishUpgradeBuilding
{
	required GUID building_id				 = 1;	//升级完成建筑ID
}

//	MSG_C2S_REQ_MULTI_CITY_COLLECT					 = 2063; // 批量内城收取
message C2SReqMultiCityCollect
{
	repeated GUID building_ids			 = 1;	//建筑ID
}

//	MSG_C2S_REQ_BUY_CITY_BUILD_WORKER				 = 2064; // 购买临时解锁道具
message C2SReqBuyCityBuildWorker
{
	optional int64 item_id			 = 1;	//道具ID
}

//	MSG_S2C_NTF_FINISH_SPEED_UP_BUILDING			 = 2065; //加速建筑完成，目前只推送到期的
message S2CNtfFinishSpeedUpBuilding
{
	optional GUID building_id				 = 1;	//加速完成建筑ID
	optional int64 config_id				 = 2;	//加速完成建筑配置ID
	optional int64 status				 	 = 3;	//状态
	optional int64 end_time				 	 = 4;	//结束时间
}

//-----------------scence hero----------------------

//英雄数据初始化
message HeroSkill
{
	required int64 skill_id							 = 1;	//技能配置ID
	required int32 level							 = 2;	//技能等级
}

message HeroEquipNew
{
	optional int64 equip_id = 1;	//装备配置ID
	optional int64 upgrade_level = 2;	 //装备品质等级 对应现在Quality upgrade_level
	optional int64 rise_level    = 3; //装备星级等级 对应现在Star rise_level
	optional int64 nPower		 = 4;	//装备战力
}

message HeroSkillKillInfo
{
	optional int64 skill_id = 1;
	optional int64 trigger_count = 2;
	optional int64 kill_count = 3;
	optional int64 skill_lv = 4;
}

message MOHero
{
	enum HeroType
	{
		HT_MAIN_HERO			 = 1;	//主英雄
		HT_ASSIST_HERO			 = 2;	//副英雄
		HT_ASSIST_RIGHT_HERO			 = 3;	//副英雄
		HT_ASSIST_4_HERO			 = 4;	//副英雄
		HT_ASSIST_5_HERO			 = 5;	//副英雄
	}
	optional int64 hero						 = 1;
	optional int32 type						 = 2;	//HeroType
	optional int32 level					 = 4;
	optional int64 hero_star_id				 = 6;
	optional int64 soldier_num				 = 7;	//带兵量.
	optional int64 power					 = 8;	//战力
	optional int64 captain_id				 = 9;	//统帅属性
	repeated HeroSkill passive_skills		 = 10;	//被动技能列表
	optional HeroSkill active_skill			 = 11;	//主动技能
	repeated HeroSkill talent_skills		 = 12;	//天赋被动技能
	repeated int64 equip_ids				 = 13;	//英雄装备	不再填充值（已经呗废弃，为了数据兼容，暂时保留）
	optional int64 equip_suit				 = 14;	//英雄套装
	repeated HeroEquipNew equip_ids_new		 = 15;	//英雄装备
	repeated HeroSkillKillInfo hero_skill_kill_infos = 16;  //英雄技能击杀信息
	optional int64 nHeroAttackType			 = 17;	//英雄攻击类型
    optional S2CNtfGeneralProperty hero_propertys = 18;	//属性加成
}

message DungeonHeroInfo
{
	optional int64 hero_id				 = 1;	//英雄id
	optional int64 hero_level_id		 = 2;	//英雄等级id
	optional int64 hero_star_id			 = 3;	//英雄星级id
//	repeated int64 hero_equips			 = 4;	//英雄装备
	optional int32 hero_pos				 = 5;	//英雄站位
	optional int32 hero_power			 = 6;	//英雄战力
//	repeated int64 equip_level			 = 7;	//英雄装备等级
	optional S2CNtfGeneralProperty hero_propertys			 = 8;	//属性加成
	optional MOHero hero_detail			 = 9;	//英雄详细信息
	repeated HeroEquipNew hero_equips	 = 10;	//英雄装备
}
message ScenceHeroInfo
{
	required int64 hero_id							 = 1;
	optional int64 power							 = 3;
}
//	MSG_SS2GS_SYNC_SCENCE_DATA										 = 2711;	//玩家上线同步场景服数据
message SYNCScenceData
{
	repeated ScenceHeroInfo sg_heros							 = 1;	//野外队伍英雄
	repeated ScenceCarInfo car							 		 = 2;	//载具

	optional int32 city_postype									 = 3;	//city 所在位置类型
}
//	MSG_SS2GS_NTF_HERO_BACK_CITY									 = 2707;	//场景服通知game服英雄返回
message NTFHeroBackCity
{
	repeated MOHero back_heros							 = 1;	//回城的英雄列表，目前只有战力给驻守英雄排序用
	optional ScenceCarInfo car							 = 2;	//回城的车，目前只有战力给驻守英雄排序用
}

//MSG_C2S_REQ_HERO_EQUIP_MATERIALS_OPERATE			    = 3231;//英雄装备材料生产
message C2SReqEquipMaterialsOperate
{
	required int64 config_id				= 1;	//生产为materials表ID，合成分解为MaterialsSysthesis表ID
	required int32 type						= 2;	//操作类型，1生产；2合成；3分解
	optional int64 material_nums			= 3;	//合成,分解数量，生成时不使用
	optional int32 slot						= 4;	//取消该槽位材料生成
}

message MaterialsInfo
{
	required int64 material_id				= 1;	//材料ID
	required int64 cost_time				= 2;	//生产时间
	required int64 material_count			= 3;	//材料数量
}
//MSG_S2C_NTF_HERO_EQUIP_MATERIALS_INFO				= 3232;//装备车间信息通知
message S2CNtfMaterialsInfos
{
	repeated MaterialsInfo material_list	= 1;	//材料信息
	required int64 begin_time				= 2;	//开始时间
	//required int64 curr_slot				= 3;	//当前生产的slot
	
}

//MSG_C2S_REQ_GET_EQUIP_MATERIALS						= 3233;//装备车间领取生成的材料
message C2S_REQ_GET_EQUIP_MATERIALS
{
	
}

//----------------scence hero----------------------

//MSG_S2C_GET_RANDOM_POS				= 2417;	//获取随机可用位置
message GMGetRandomPos
{
	optional Point2D xPos1 = 1;
	optional Point2D xPos2 = 2;
}

message SoldierCount
{
	optional int64 id		 = 1;
	optional int64 count	 = 2;
}

message GameSoldier
{
	repeated SoldierCount soldiers		 = 1;
}
//
//	MSG_SS2GS_SOLDIER_POWER_REFRESH                  = 2612;	// 队伍战力刷新
message SS2GSSoldierPowerRefresh
{
	optional int64 scence_soldier_power			 = 1;
	repeated SoldierCount soldiers 			 	 = 2;
}
//里程碑
message MileTaskRewardState
{
	optional int64 task_id						 = 1;
	optional int64 area_id						 = 2;	// 领奖励时所在小服id，跟本服id不匹配时无法查询排行榜
}
enum EMLSTCompleteState
{
	MLSTCS_None								 = 1;	//未完成 服务器使用
	MLSTCS_RewardAfterTaskSettle			 = 2;	//需要任务结算时间后才能领奖
	MLSTCS_CanReward						 = 3;	//可以直接领奖

}
message MileTaskCompleteState
{
	optional int64 task_id				 = 1;
	optional int32 state				 = 2;	//EMLSTCompleteState
}
message MileStoneTaskData
{
	repeated MileTaskCompleteState complete_tasks	 = 1;	//已完成(可领奖)任务列表
	repeated MileTaskRewardState reward_states		 = 2;	//领奖状态 
}
//	MSG_C2S_REQ_MILESTONE_CUR_TASK_PROGRESS					 = 3431;	//里程碑当前任务进度 请求
message ReqMilestoneCurTask
{
	optional int32 param					 = 1;
}
//	MSG_S2C_RSP_MILESTONE_CUR_TASK_PROGRESS					 = 3432;	//里程碑当前任务进度 返回  每次打开界面请求
message S2CRspMileStoneCurTaskProgress
{
	optional int32 result				 = 1;	//0 成功 其他，失败
	optional int64 task_id				 = 2;
	optional int32 progress				 = 3;
	optional int32 param				 = 4;
}
//	MSG_S2C_NTF_MILESTONE_TASK_COMPLETE						 = 3433;	//完成里程碑任务通知
message S2CNTFMileStoneTaskComplete
{
	optional MileTaskCompleteState task_data				 = 1;
}	
//	MSG_C2S_REQ_MILESTONE_TASK_RANK							 = 3434;	//里程碑任务排行榜 请求
message ReqMileStoneTaskRank
{
	optional int64 task_id				 = 1;
}

//	MSG_S2C_RSP_MILESTONE_TASK_RANK							 = 3435;	//里程碑任务排行榜 返回
message RspMileStoneTaskRank
{
	enum EMilestoneRankResult
	{
		MLSRR_Success			 = 0;	//成功
		MLSRR_SysError			 = 1;	//错误
		MLSRR_AreaError			 = 2;	//玩家完成任务所在小服id不匹配
		MLSRR_ErrorTaskType		 = 3;	//任务类型没有对应排行榜
		MLSRR_TaskNotComplete	 = 4;	//任务未完成
	}
	optional int32 result							 = 1;	//EMilestoneRankResult
	optional int64 task_id							 = 2;
	optional RankInfo rank_data						 = 3;
}
//	MSG_C2S_REQ_GET_MILESTONE_TASK_REWARD					 = 3436;	//领取里程碑任务奖励 请求
message ReqGetMilestoneTaskReward
{
	optional int64 task_id				 = 1;
}
//	MSG_S2C_RSP_GET_MILESTONE_TASK_REWARD					 = 3437;	//领取里程碑任务奖励 返回	
message RspGetMilestoneTaskReward
{
	enum EMilestoneAwardResult
	{
		MLSAR_Success			 = 0;	//成功
		MLSAR_SysError			 = 1;	//错误
		MLSAR_RewardStateError	 = 2;	//奖励已经领取过了
		MLSAR_TaskNotComplete	 = 3;	//任务未完成
		MLSAR_IsRewarding		 = 4;	//奖励正在领取中（上一个请求没有执行完）
	}
	optional int32 result							 = 1;	//EMilestoneAwardResult
	optional int64 task_id							 = 2;
}

//	MSG_S2S_REQ_CHANGE_MILESTONE_TASK_PROCESS						 = 3438;	//里程碑进度变化
message ReqChangeMilestoneTaskProcess
{
	repeated IntPair tasks			 = 1;	//pairfirst task id, pairsecond == 0 incr other reduce 
}

message MLSCPLTTask
{
	optional int64 task_id			 = 1;
	optional int32 complete_state	 = 2;
	optional bytes rank_data		 = 3;
}

message MLSTaskObjData
{
	optional GUID object			 = 1;
	optional int64 time				 = 2;
}

message MLSTaskProcess
{
	optional int64 task_id						 = 1;
	optional int32 process						 = 2;	
	repeated MLSTaskObjData obj_list			 = 3;
}
message MLSAllianceProcess
{
	optional GUID alliance_id						 = 1;
	optional int32 process							 = 2;	
}
message MLSAllianceTaskData
{
	optional int64 task_id							 = 1;
	repeated MLSAllianceProcess alliance_process	 = 2;
}
message MilsestoneCache
{
	repeated MLSCPLTTask cplt_tasks					 = 1;	//已完成任务列表
	repeated MLSTaskProcess process_data			 = 2;	//记录的任务进度数据
	repeated MLSAllianceTaskData alliance_data		 = 3;	//记录的任务进度数据
	optional int64 cur_task							 = 4;	//当前正在进行的任务
	repeated MileTaskRewardState reward_states		 = 5;	//领奖状态 
	optional int32 data_version						 = 6;	//数据版本 老版本数据更新后需要特殊处理
}

message AllianceSettleData
{
	optional GUID alliance_id						 = 1;
	optional int64 alliance_power					 = 2;
	repeated GUID alliance_member					 = 3;
	optional int32 process							 = 4;
}
//	MSG_RPC_MILESTONE_GET_ALLIANCE_SETTLE_DATA		= 50133;	//里程碑任务结算时获取联盟结算信息
message MilestoneGetAllianceSettleData
{
	optional int32 result							 = 1;
	repeated AllianceSettleData alliance_list		 = 2;
	
}

//	MSG_C2S_REQ_SET_AUTORETURN                  = 2068; // 设置部队主动攻击，战斗结束后是否自动回城
message C2SReqSetAutoReturn
{
	required int64 nautoreturn			 	 = 1;	//设置是否主动攻击，战斗结束之后是否自动返回。
	optional GUID cityid			 	 = 2;	//
}
