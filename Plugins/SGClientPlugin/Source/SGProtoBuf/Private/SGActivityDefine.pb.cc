// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGActivityDefine.proto

#include "SGActivityDefine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SGActivityDefine {
}  // namespace SGActivityDefine
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SGActivityDefine_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SGActivityDefine_2eproto = nullptr;
const uint32_t TableStruct_SGActivityDefine_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_SGActivityDefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026SGActivityDefine.proto\022\020SGActivityDefi"
  "ne*\206\014\n\rEActivityType\022\025\n\021ACTIVITY_ASSEMBL"
  "E\020\001\022\026\n\022ACTIVITY_SEVEN_DAY\020\002\022\024\n\020ACTIVITY_"
  "SIGN_IN\020\003\022\030\n\024ACTIVITY_SPRINT_RANK\020\004\022\032\n\026A"
  "CTIVITY_ALLIANCE_RANK\020\005\022\032\n\026ACTIVITY_DAIL"
  "Y_SIGN_IN\020\006\022\026\n\022ACTIVITY_COMMANDER\020\007\022\031\n\025A"
  "CTIVITY_REPEATED_PAY\020\t\022\025\n\021ACTIVITY_ROULE"
  "TTE\020\n\022\027\n\023ACTIVITY_RED_PACKET\020\013\022\025\n\021ACTIVI"
  "TY_DOOMSDAY\020\014\022\032\n\026ACTIVITY_SHELTER_BUILD\020"
  "\r\022\027\n\023ACTIVITY_TIMED_RACE\020\016\022\031\n\025ACTIVITY_M"
  "OBILIZATION\020\022\022!\n\035ACTIVITY_MOBILIZATION_P"
  "REVIEW\020\023\022\027\n\023ACTIVITY_CYCLE_TASK\020\025\022\035\n\031ACT"
  "IVITY_TIME_LIMIT_MATCH\020\026\022\032\n\026ACTIVITY_ALL"
  "IANCE_BOSS\020\031\022\031\n\025ACTIVITY_BATTLEROYALE\020\032\022"
  "\032\n\026ACTIVITY_ASSEMBLE_TASK\020\033\022\032\n\026ACTIVITY_"
  "ALLIANCE_DUEL\020\035\022\027\n\023ACTIVITY_HERO_TRIAL\020\036"
  "\022\"\n\036ACTIVITY_ALLIANCE_DUEL_PREVIEW\020\037\022\025\n\021"
  "ACTIVITY_SHOWONLY\020b\022\025\n\021ACTIVITY_CALENDAR"
  "\020c\022\036\n\032CHARGE_ACTIVITY_CHARGE_BAG\020e\022 \n\034CH"
  "ARGE_ACTIVITY_CHARGE_BAGSP\020f\022\035\n\031CHARGE_A"
  "CTIVITY_MOON_CARD\020g\022\035\n\031CHARGE_ACTIVITY_S"
  "UBSCRIBE\020h\022\037\n\033CHARGE_ACTIVITY_BATTLE_PAS"
  "S\020i\022\030\n\024CHARGE_CUSTOM_CHARGE\020j\022\031\n\025CHARGE_"
  "ACTIVITY_REPAY\020k\022\036\n\032CHARGE_ACTIVITY_DAIL"
  "Y_PACK\020l\022\"\n\036CHARGE_ACTIVITY_BASIC_CURREN"
  "CY\020m\022\033\n\027CHARGE_TITLE_CHARGE_BAG\020n\022\036\n\032CHA"
  "RGE_ULTIMATE_CHARGE_BAG\020o\022\026\n\022CHARGE_GROW"
  "TH_FUND\020x\022\027\n\023CHARGE_FIRST_CHARGE\020y\022!\n\035CH"
  "ARGE_ACTIVITY_CHARGE_WEEKLY\020z\022!\n\035CHARGE_"
  "ACTIVITY_NEW_SUBSCRIBE\020{\022\032\n\026ACTIVITY_FRE"
  "E_PURCHASE\020|\022\026\n\022ACTIVITY_COME_BACK\020}\022\034\n\030"
  "ACTIVITY_BATTLE_PASS_NEW\020~\022\027\n\023ACTIVITY_W"
  "ORLD_BOSS\020\177\022\032\n\025CHARGE_ACTIVITY_COUNT\020\200\001\022"
  "$\n\037CHARGE_ACTIVITY_TREASURE_MARKET\020\201\001\022\031\n"
  "\024ACTIVITY_HERO_MANUAL\020\202\001\022\033\n\026ACTIVITY_SHA"
  "RANNA_FLOP\020\203\001\022\035\n\030ACTIVITY_SHARANNA_PUZZL"
  "E\020\204\001\022\033\n\026ACTIVITY_SHARANNA_GIFT\020\205\001\022\035\n\030WEE"
  "KLYPAY_EVENTS_MONSTER\020\351\007\022\032\n\025WEEKLYPAY_EV"
  "ENTS_TASK\020\352\007\022\032\n\025WEEKLYPAY_EVENTS_SHOP\020\353\007"
  "\022\031\n\024WEEKLYPAY_EVENTS_NEW\020\321\017*\253\013\n\016EActivit"
  "yEvent\022\033\n\027EACTIVITY_PLAYER_ONLINE\020\001\022\032\n\026E"
  "ACTIVITY_CASTLE_LEVEL\020\002\022!\n\035EACTIVITY_KIL"
  "L_MONSTER_TOP_LV\020\003\022\036\n\032EACTIVITY_CARUPGRA"
  "DE_POWER\020\004\022\036\n\032EACTIVITY_HERO_TOTAL_POWER"
  "\020\005\022\032\n\026EACTIVITY_HERO_POWER_1\020\006\022\032\n\026EACTIV"
  "ITY_HERO_POWER_2\020\007\022\032\n\026EACTIVITY_HERO_POW"
  "ER_3\020\010\022\034\n\030EACTIVITY_ALLIANCE_POWER\020\t\022\034\n\030"
  "EACTIVITY_PERSONAL_POWER\020\n\022\033\n\027EACTIVITY_"
  "TRAIN_SOLDIER\020\013\022\032\n\026EACTIVITY_KILL_MONSTE"
  "R\020\014\022\035\n\031EACTIVITY_GATHER_RESOURCE\020\r\022%\n!EA"
  "CTIVITY_TECH_BUILDING_ADD_POWER\020\016\022\036\n\032EAC"
  "TIVITY_PVP_KILL_SOLDIER\020\017\022\034\n\030EACTIVITY_D"
  "AILLY_REFRESH\020\020\022\034\n\030EACTIVITY_WEEKLY_REFR"
  "ESH\020\021\022\035\n\031EACTIVITY_MONTHLY_REFRESH\020\022\022 \n\034"
  "EACTIVITY_AFTER_CHARGE_EVENT\020\023\022\034\n\030EACTIV"
  "ITY_GAME_CITY_INIT\020\024\022\032\n\026EACTIVITY_SETTLE"
  "_EVENT\020\025\022\037\n\033EACTIVITY_CLEAR_PLAYER_DATA\020"
  "\026\022\036\n\032EACTIVITY_ALL_MODULE_POWER\020\027\022\031\n\025EAC"
  "TIVITY_ENERGY_COST\020\030\022\036\n\032EACTIVITY_SPEED_"
  "UP_BY_ITEM\020\031\022\032\n\026EACTIVITY_SPEED_UP_ANY\020\032"
  "\022\032\n\026EACTIVITY_CHARGE_COUNT\020\033\022\035\n\031EACTIVIT"
  "Y_TASKTYPE_UPDATE\020\034\022\"\n\036EACTIVITY_HERO_UP"
  "_STAR_BY_ITEM\020\035\022!\n\035EACTIVITY_CAR_UP_STAR"
  "_BY_ITEM\020\036\022\035\n\031EACTIVITY_CAR_UP_STAR_ANY\020"
  "\037\022\036\n\032EACTIVITY_USE_CAR_EXP_ITEM\020 \022#\n\037EAC"
  "TIVITY_HERO_UP_EQUIP_BY_ITEM\020!\022\037\n\033EACTIV"
  "ITY_HERO_UP_EQUIP_ANY\020\"\022\034\n\030EACTIVITY_BEF"
  "ORE_MIGRATE\020#\022\033\n\027EACTIVITY_AFTER_MIGRATE"
  "\020$\022&\n\"EACTIVITY_COMMANDER_ACTIVITY_POWER"
  "\020%\022\035\n\031EACTIVITY_ROTATE_ROULETTE\020&\022\034\n\030EAC"
  "TIVITY_BUILDING_POWER\020\'\022\030\n\024EACTIVITY_TEC"
  "H_POWER\020(\022\026\n\022EACTIVITY_INCIDENT\020)\022#\n\037EAC"
  "TIVITY_KILL_ASSEMBLE_MONSTER\020*\022#\n\037EACTIV"
  "ITY_TIME_LIMIT_MATCH_ITEM\020+\022%\n!EACTIVITY"
  "_TIME_LIMIT_MATCH_SETTLE\020,\022\033\n\027EACTIVITY_"
  "PROPERTY_INIT\020-\022\030\n\024EACTIVITY_STUDY_TECH\020"
  ".*\227\003\n\032EActivityCommanderIntegral\022\021\n\rTRAI"
  "N_SOLDIER\020\001\022\020\n\014KILL_MONSTER\020\002\022\023\n\017GATHER_"
  "RESOURCE\020\003\022\022\n\016PERSONAL_POWER\020\004\022\026\n\022TECH_B"
  "UILDING_UPLV\020\005\022\024\n\020PVP_KILL_SOLDIER\020\006\022\024\n\020"
  "SPEED_UP_BY_ITEM\020\010\022\030\n\024HERO_UP_STAR_BY_IT"
  "EM\020\t\022\023\n\017CAR_UP_STAR_ANY\020\n\022\027\n\023CAR_UP_STAR"
  "_BY_ITEM\020\013\022\024\n\020USE_CAR_EXP_ITEM\020\014\022\025\n\021HERO"
  "_UP_EQUIP_ANY\020\r\022\031\n\025HERO_UP_EQUIP_BY_ITEM"
  "\020\016\022\020\n\014SPEED_UP_ANY\020\017\022\023\n\017ROTATE_ROULETTE\020"
  "\020\022\022\n\016BUILDING_POWER\020\021\022\016\n\nTECH_POWER\020\022\022\014\n"
  "\010INCIDENT\020\023*)\n\016EChargeBagType\022\027\n\023CBT_FRE"
  "E_CHARGE_BAG\020\003*|\n\020EPowerModuleType\022\014\n\010PM"
  "T_None\020\000\022\017\n\010PMT_Hero\020\201\226\243a\022\024\n\rPMT_CityBui"
  "ld\020\347\226\243a\022\017\n\010PMT_Tech\020\314\227\243a\022\022\n\013PMT_Soldier\020"
  "\261\230\243a\022\016\n\007PMT_Car\020\226\231\243a*\362\001\n\021EActivityTimeTy"
  "pe\022\027\n\023EACTIVITY_TIME_NONE\020\000\022\034\n\030EACTIVITY"
  "_TIME_PERMANENT\020\001\022\035\n\031EACTIVITY_TIME_LIMI"
  "T_TIME\020\002\022\036\n\032EACTIVITY_TIME_SERVER_OPEN\020\003"
  "\022\031\n\025EACTIVITY_TIME_CIRCLE\020\004\022\032\n\026EACTIVITY"
  "_TIME_TRIGGER\020\005\022\027\n\023EACTIVITY_TIME_WEEK\020\006"
  "\022\027\n\023EACTIVITY_TIME_LOOP\020\007*\233\001\n\031EActivityB"
  "attlePassAction\022 \n\034ACTION_SPEED_UP_FOR_B"
  "UILDING\020\001\022\034\n\030ACTION_SPEED_UP_FOR_TECH\020\002\022"
  "%\n!ACTION_SPEED_UP_FOR_TRAIN_SOLDIER\020\003\022\027"
  "\n\023ACTION_KILL_MONSTER\020\004"
  ;
static ::_pbi::once_flag descriptor_table_SGActivityDefine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SGActivityDefine_2eproto = {
    false, false, 4023, descriptor_table_protodef_SGActivityDefine_2eproto,
    "SGActivityDefine.proto",
    &descriptor_table_SGActivityDefine_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_SGActivityDefine_2eproto::offsets,
    nullptr, file_level_enum_descriptors_SGActivityDefine_2eproto,
    file_level_service_descriptors_SGActivityDefine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SGActivityDefine_2eproto_getter() {
  return &descriptor_table_SGActivityDefine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SGActivityDefine_2eproto(&descriptor_table_SGActivityDefine_2eproto);
namespace SGActivityDefine {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActivityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[0];
}
bool EActivityType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 18:
    case 19:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 98:
    case 99:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 1001:
    case 1002:
    case 1003:
    case 2001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActivityEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[1];
}
bool EActivityEvent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActivityCommanderIntegral_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[2];
}
bool EActivityCommanderIntegral_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChargeBagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[3];
}
bool EChargeBagType_IsValid(int value) {
  switch (value) {
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPowerModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[4];
}
bool EPowerModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 204000001:
    case 204000103:
    case 204000204:
    case 204000305:
    case 204000406:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActivityTimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[5];
}
bool EActivityTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActivityBattlePassAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGActivityDefine_2eproto);
  return file_level_enum_descriptors_SGActivityDefine_2eproto[6];
}
bool EActivityBattlePassAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SGActivityDefine
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
