syntax = "proto2";

package SGMsg;

// import "SGDefine.pb";
import "SGMsgBase.proto";

// MSG_S2C_NTF_SERVER_TIME                     = 105; // 客户端与游戏服务器建立TCP连接的时候，会收到一条包含服务器时间的消息
message S2CNtfServerTime
{
	required GUID client_id = 1; // 客户端被分配的ID
	required int64 server_time = 2; // 服务器时间，ms。一般会比Unix时间戳快N个小时。N为服务器当前时区
	required int32 time_zone = 3; // 服务器时区
	optional int64 server_open_time = 4;// 开服时间
}

//同步心跳(给客户端用)
//MSG_REQ_HEART_BEAT = 301
message ReqHeartBeat
{
	required int64 attached = 1; // 同步心跳附加内容，客户端发什么，服务器就返回什么
}

// 同步心跳，返回给客户端
//MSG_RSP_HEART_BEAT = 301
message RspHeartBeat
{
	required int64 attached    = 1; // 附加内容，客户端发什么，服务器就返回什么
	required int64 server_time = 2; // 服务器时间，毫秒
}

// MSG_HTTP2MS_NTF_AREA_CLOSING          = 127;  // HttpServer通知Master,当前小区马上关闭
// MSG_MS2GW_NTF_AREA_CLOSING          = 128;  // Master通知Gate，当前小区马上关闭
message Http2MSNtfAreaClosing
{
	required uint32 seconds_later = 1; // 几秒钟后关闭
}
// MSG_S2HTTP_SHOW_STRING_TO_HTTP_CLIENT    = 129;  // 向Http客户端显示String
message S2HTTPShowStringToHttpClient
{
	optional int32 http_status_code = 1; // Http 返回码
	optional bytes content          = 2; // 返回给客户端的具体内容
}

// MSG_HTTP2MS_GET_ROLE_COUNT                  = 600; // HttpServer通知Master, 游戏单服角色数
message Http2MSGetRoleCount
{
	optional uint32 area_id = 1; // 小区ID
}

// MSG_HTTP2MS_MAIL                            = 601; // HttpServer通知Master, 邮件
// message Http2MSMail
// {
// 	optional uint64 iggid = 1; // 针对iggid单发
// 	optional int32 server_id = 2; // 小区ID
// 	optional string data = 3; // 邮件内容
// 	optional GUID char_id = 4; // 角色ID
// }

// MSG_HTTP2MS_ALLIANCE_INFO                   = 602; // HttpServer通知Master, 联盟信息
message Http2MSAllianceInfo
{
	optional GUID alliance_id = 1; // 联盟ID
	optional S2HTTPShowStringToHttpClient rsp_content = 2; // 内容
}

// MSG_HTTP2MS_PLAYER_INFO                     = 603; // HttpServer通知Master, 玩家信息
// message Http2MSPlayerInfo
// {
// 	optional GUID char_id = 1; // 角色ID
// 	optional S2HTTPShowStringToHttpClient rsp_content = 2; // 内容
// 	optional string account = 3; // 原始账号 例如iggid
// }

// MSG_HTTP2MS_CHANGE_NAME                     = 604; // HttpServer通知Master, 修改名字
message Http2MSChangeName
{	
	optional GUID char_id = 1; // 角色ID
	optional string target_name = 2; // 目标名字
}

message Http2MSJson
{
	optional GUID char_id = 1; // 角色ID	
	optional string data = 2; // json字符串
	optional S2HTTPShowStringToHttpClient rsp_content = 3; // 内容
	optional int32 server_id = 4; // 小区ID
	optional string account_inner = 5; // 唯一账号 例如 iggsdk 登陆的 "2-1231241"
	optional int64 game_server_id = 6; // 在哪个GameServer上
	optional int32 login_mode = 7; // 登录模式
	optional GUID alliance_id = 8; // 联盟ID
	optional string player_name = 9; // 玩家名字
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////场景相关/////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

// MSG_GW2MS_REQ_SUIT_ONLINE_GAME_ID				   = 231; // GateServer请求MasterServer玩家刚上线时候适合的Game
message GW2MSReqSuitOnlineGameId
{
	required GUID client_id = 1;
	required GUID role_id = 2;
	required string client_version = 3;
}

// MSG_MS2GW_RSP_SUIT_ONLINE_GAME_ID				   = 232; // MasterServer返回给GateServer玩家刚上线时候适合的Game
message MS2GWRspSuitOnlineGameId
{
	required GUID player_id = 1;
	optional int32 game_id = 2;
	optional string area_line_id = 3;
}


/////////////////////////////////////////断线重新序列号应答//////////////////////////////////////////////////////////////////////////////
// 应答客户端  	MSG_S2C_NTF_REPLY	   = 1200; 
message S2CNtfReply
{
	//处理状态，是不是在异常时返回(例如消息解码失败，验证判定异常等)，1:异常 2:正常
	enum EReplayRet
	{
		REPLYRET_FAIL   = 1;	//1:异常
		REPLYRET_SUC    = 2;	//2:正常
	}
	required int64	msg_id      	= 1;//协议消息id
	required int64	msg_serial  	= 2;//协议前端发送过来的序列号
	required int64	ret  			= 3;//处理状态 EReplayRet 枚举
}


//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////预约新区/////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
message NewAreaInfo
{ 
	enum ORDERSTATE
	{
		ORDERSTATE_NONR = 0;	//0可以预定
		ORDERSTATE_ALREADY    = 1;	//1不可以预定
	}	
	required int32 big_area_id = 1;
	required int32 area_id = 2;
    optional string area_name = 3;//大区名称
	optional int64 area_ordercount = 4;//预定人数
	optional int32 order_state = 5;//预约状态 
	optional int32 min_count = 6;//随机最少人数
	optional int32 max_count = 7;//随机最大人数
	required string open_time = 8;//开服时间
}


//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////合服相关/////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//MSG_GS2PUB_REQ_MERGE_SERVER_PERSONAL_KEY     = 12500;    //玩家上线，判断合服之后，将玩家个人的key迁移
message GS2PUBReqMergeServerPersonalKey
{
    required GUID player_id     = 1;
    required int32 pre_area_id  = 2; //之前的服务器ID
    required int32 cur_area_id  = 3; //现在的服务器ID
    required string name        = 4; //玩家名字，检查重名
}

//MSG_PUB2GS_RSP_MERGE_SERVER_PERSONAL_KEY           = 12501;    //玩家上线，判断合服之后，将玩家个人的key迁移
message PUB2GSRspMergeServerPersonalKey
{
    required int32 result           = 1;
    optional bool name_repeated     = 2; //名字是否重复
    optional string new_name        = 3; //新的名字
    optional int32 pre_area_id      = 4; //之前所在服务器ID
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////玩家缓存信息相关/////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

//MSG_S2S_PLAYER_BASE_INFO				   = 195; //上线同步玩家信息
message S2SPlayerBaseInfo
{
	required GUID player_id = 1; //玩家id
	optional string name    = 2; //玩家名字
	optional int32 level    = 3; //等级
	optional int32 platformworld_type  = 4;//登陆大区QQ or Wechat
}

message PlayerDetailInfo
{
	required S2SPlayerBaseInfo info = 1; //玩家基本信息
}

//MSG_S2S_UPDATE_PLAYER_CACHE_DATA              = 196; //基本信息变化后的同步
message S2SUpdatePlayerCacheData
{
	required int32 type 						= 1; // 类型
	required pbTdata cache_data 				= 2;
}

message S2SPlayerMultiCacheInfo
{
	enum ECacheOpType
	{
		eType_Name = 1;
		eType_Level = 2;
		eType_PlatformWorldType = 3;
	}
	
	required GUID player_id 					= 1; // 玩家id
	repeated S2SUpdatePlayerCacheData data						= 2;
}
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////其他/////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
message RedPointValue
{
	required string redpoint_id  =1;// 模块小红点id 对应Prompt配表的ID字段 
	required int32  count        = 2;//数目
}


//MSG_S2C_NTF_MODULE_RED_POINT           		 = 2441;//同步系统小红点（前端登陆无法获取数据）
message S2CNtfModuleFRedPoint
{	
	repeated RedPointValue redpoint_list				= 1; // 模块小红点id 对应Prompt配表的ID字段  
}



// MSG_GS2LOGIN_REPORT_FINANCIAL_DATA		= 1160, //玩家数据内部统计
message GS2LoginReportFinancialData
{
	required string open_id             = 1; // 玩家ID
	required GUID player_id             = 2; // 玩家ID
	required int32 area_id 				= 3; // 小区ID
	required string role_name 			= 4; // 名字
	required int32 role_level 			= 5; // 等级
	required int32 cur_diamond_tx 		= 6; // tx当前钻石
	required int32 gen_diamond_tx 		= 7; // tx已消费钻石
	required int32 all_recharge 		= 8; // 累计充值现金（自服）
	required int32 all_rechargeYBP 		= 9; // 累计充值钻石（自服）
	required int32 all_consume_dimond   = 10; // 累计消耗的钻石 （自服）
}
// MSG_GS2LOGIN_RSP_FINANCIAL_DATA_COLLECT		= 1160, //玩家数据内部统计
message GS2LoginRspFinancialDataCollect
{
	repeated GS2LoginReportFinancialData data = 1;
}

// 测试-GM命令 MSG_C2S_REQ_GM_COMMAND = 2001
message C2SReqGMCommand
{
	required GUID player_id           = 1;
	required int32 command_id         = 2; //参见MsgID::GMComandID
	repeated string command_arg_list  = 3; //新的参数列表，后面所有新增gm命令，参数同时使用这个传递
	optional GUID city_id 			  = 4;
}

// 测试-GM命令 MSG_S2C_RSP_GM_COMMAND = 2002
message S2CRspGMCommand
{
	required GUID player_id           = 1;
	optional int32 command_id         = 2; //参见MsgID::GMComandID
	optional bool  result             = 3; //参见执行的结果
	optional string param_str         = 4; // 参数返回
}

// 通知机器人消息 MSG_S2C_NTF_ROBOT_MESSAGE = 2003
message S2CNtfRobotMessage
{
	required GUID player_id           = 1;
	required int32 func_type          = 2; //功能类型
	required int32 result             = 3; //结果（0-失败，1-成功）
	required string extra_msg         = 4; //额外消息
}

//MSG_BGIP2GS_GM_COMMAND          = 2202, // IDIP的Gm命令
message BGIP2GSReqGMCommand
{
	required string 	GMName		 = 1;
	required int32 		BigArea		 = 2;
	required int32 		AreaId	 	 = 3;
	required int32 		ServerType	 	 = 4;
	required int32 		ServerCommdType  = 5;
    required string     ServerCommd = 6;
}

message ClientTransBody
{
	required uint32 cmd_id                       = 1;
	required uint32 config_server_id             = 2;
	required uint32 client_fd                    = 3;
	required bytes  msg_buf                      = 4;
}

// SimpleStructParser
message SimpleStructParser
{
	repeated StringInt32 str_int32_list = 1;
}
message StringInt32
{
	optional string str = 1;
	optional int32 num = 2;
}


//--------------------伙伴 begin-------2100开始---------------------------------------------
	
//MSG_C2S_REQ_STORY_ACCEPT			= 2100;
message	C2SReqStoryAccept
{
	required int64 hero_id			= 1;	//英雄id
	required int32 story_series 	= 2;	//传记一:1 传记二:2 ...
}

enum EHeroStoryStatus
{
	EHeroStoryStatus_None  	= 0;  	// 未开启
	EHeroStoryStatus_Avalid	= 1;  	// 可领取
	EHeroStoryStatus_Taked 	= 2;    // 已领取
}

// MSG_C2S_REQ_HERO_STORY_REWARD               = 2101;  //领取英雄背景故事奖励
message C2SReqHeroStoryReward
{
	required int64 hero_id			= 1;	//英雄id
	required int64 story_id		 	= 2;	//故事id
}

//MSG_C2S_REQ_HERO_LEVLEUP					= 2104;	 //升级（默认是升级一级，如果appoint_level不为空：升级到前端指定等级）
message C2SReqHeroUpLevel
{
	required int64 hero_id			= 1;//英雄id
	optional int32  appoint_level	    = 2;//升级到指定等级（如果没有数值默认是升级一级）
}	

//MSG_C2S_REQ_HERO_UP_STAR  		= 2105;//升星（一次升一星）
message C2SReqHeroUpStar
{
	enum ECostType
	{
		ECostType_One = 1;	//优先消耗专用碎片，专用碎片不足时候，消耗通用碎片
		ECostType_Two = 2;	//只消耗专用碎片
	}
	required int64 Hero_id			= 1;//伙伴id
	required int32 cost_type			= 2;//升星消耗方式 ECostType
}	


//MSG_C2S_REQ_HERO_UP_SKILL			= 2106;//升级技能等级（一次技能等级加一）
message C2SReqHeroUpSkill
{
	required int64 Hero_id			= 1;//伙伴id
	required int64 skill_type		= 2;//技能位置(1=主动 2=被动 3=被动 4=觉醒)
}	

//MSG_C2S_REQ_HERO_UP_TALENT		= 2107;  //激活或提升天赋   
message C2SReqHeroUpTalent
{
	required int64 Hero_id			= 1; //英雄id
	required int64 talent_node_id	= 2; //天赋节点id
}

//MSG_C2S_REQ_HERO_TALENT_RESET		= 2108;  //天赋重置
message C2SReqHeroTalentReset
{
	required int64 Hero_id			= 1; //英雄id
	required int64 cost_type		= 2; //ITEM_SUB_TYPE_GOLD = 10000;充值货币 ITEM_SUB_TYPE_TALENT_RESET	= 50010; 天赋重置道具
}

//MSG_C2S_REQ_HERO_COST_FRAGMENT	= 2109;  //合成碎片
message C2SReqHeroCostFragment
{
	required int64 Hero_id			= 1; //英雄id
}

//MSG_C2S_REQ_SET_HERO_CAPTAIN		= 2110;  //设置英雄统帅
message C2SReqSetHeroCaptain
{
	required int64 captain_id		= 1; //统帅id
	required int64 hero_id			= 2; //英雄id
}

//MSG_C2S_REQ_SET_HERO_OFFICER		= 2111;  //设置英雄内政官
message C2SReqSetHeroOfficer
{
	required int64 officer_type		= 1; //内政官类型
	required int64 hero_id			= 2; //英雄id
}

//MSG_C2S_REQ_HERO_UP_EQUIP					= 2111;  //装备强化
message C2SReqHeroUpEquip
{
	required int64 hero_id			= 1;//英雄id
	required int64 slot				= 3;//装备部位
}

//MSG_C2S_REQ_HERO_INTENSIFY_EQUIP			= 2117;  //新装备强化
message C2SReqHeroIntensifyEquip
{
	required int64 hero_id			= 1;//英雄id
	required int64 slot				= 3;//装备部位
}

//	MSG_C2S_REQ_HERO_REBORN						= 2102;  //请求英雄重生
message C2SReqHeroReborn
{
	required int64 hero_id			= 1;//英雄id
	optional int32 type             = 2;//1：消耗齿轮币重生，2:正常重生
}

//	MSG_S2C_RSP_HERO_REBORN						= 2103;  //响应英雄重生

//	MSG_C2S_REQ_HERO_HONOR_UPGRADE				= 2119;  //英雄荣誉殿堂等级提升 返回 MSG_S2C_RESULT_RESPONSE
message ReqHeroHonorUpgrade
{
	optional int64 hero_id				 = 1;
	optional int32 cur_level			 = 2;	//当前等级，防止重复升级
	optional int32 cost_type			 = 3;	//参照 C2SReqHeroUpStar 升星消耗方式 ECostType
}

//MSG_C2S_REQ_COMMON_CHIP_EXCHANGE       = 2113;  //通用碎片兑换
message C2SReqCommonChipExchange
{
	optional int64 hero_id			= 1;//兑换目标英雄id
	optional int64 chip_num			= 2;//兑换碎片数量
}

// MSG_C2S_REQ_HERO_RESONATE_CMD               = 2114;  //英雄共鸣
message C2SReqHeroResonateCmd
{
	enum ResonateCmd
	{
		SET		 	 = 1; // 放置
		REMOVE 		 = 2; // 移除
		UNLOCK 		 = 3; // 解锁
		CD_CLEAR 	 = 4; // 清除CD
	}
	optional int32 cmd			= 1; // ResonateCmd 类型
	optional int32 slot			= 2; // 槽位id(从0开始)
	optional int64 hero_id		= 3; // 英雄id
}

message HeroResonateLeader
{
	optional int64 hero_id		= 1; // 英雄id
	optional int64 hero_level	= 2; // 英雄等级
}

// MSG_C2S_REQ_HERO_RESONATE_LEADER_INFO       = 2115;  //英雄共鸣领袖信息 EmptyMsg
// 响应
// MSG_S2C_RSP_HERO_RESONATE_LEADER_INFO       = 2116;  //返回英雄共鸣领袖信息
message S2CRspHeroResonateLeaderInfo
{
	repeated HeroResonateLeader	leader_list = 1; // 英雄领袖信息 等级 战力从大到小排序 
}

// MSG_C2S_REQ_RECRUIT              = 2130;  //招募
message C2SReqRecruit
{
	optional int64 card_id = 1; // Card表ID
	optional int64 area_id = 2; // AreaCard表ID
	optional bool free_first = 3; // 优先使用免费次数
}

// MSG_MULTI_C2S_REQ_RECRUIT                   = 2129;  //招募
message MultiC2SReqRecruit
{
	repeated C2SReqRecruit recruit_list = 1; // 招募列表
}

// MSG_C2S_RSP_RECRUIT                         = 2131;  
message S2CRspRecruit
{
	repeated ItemInfo item_list = 1; // 获得的道具列表
}

// MSG_S2C_RECRUIT_LEGEND_OPEN_LIST            = 2133; // 保底英雄列表
message S2CRecruitLegendOpenList
{
	repeated int64 hero_list = 1; // 开放的英雄列表
}

// MSG_C2S_REQ_SET_LEGEND                      = 2134; // 设置保底英雄
message C2SReqSetLegend
{
	optional int64 hero_id = 1; // 英雄id
}

//--------------------伙伴 end-----------------------------------------------------------------

// MSG_C2S_REQ_SET_LANGUAGE                    = 2120; // 设置语言
message C2SReqSetLanguage
{
	required int64 language_switch_id = 1; // LanguageSwitch ID
}

// // MSG_S2C_NTF_LANGUAGE                    = 2121; // 当前语言
// message S2CNtfLanguage
// {
// 	required int64 language_id = 1; // LanguageSwitch ID
// }

//----------------------------------商店---2200 Begin-------------------------------------//

// 商品结构
message ShopItemInfo
{
	required int64 goods_id = 2; // 对应配表ID
	required int64 count = 3; // 数量
	optional int64 buy_ever_count = 4; // 服务器使用 位置上曾今购买的次数
}

// MSG_C2S_REQ_SHOP_LIST                     = 2196; // 请求商店列表
message C2SReqShopList
{
	required int32 shop_type = 1; // 商店ID
	optional int64 refresh_time_stamp = 2; // 刷新时间戳,毫秒
	optional int64 opt_type = 3; // 客户端用参数
}

// MSG_S2C_RSP_SHOP_LIST                     = 2197; // 返回商店列表
message S2CRspShopList
{
	repeated LabelShopList label_shop_list = 1; // 多页签商店信息
	optional int32 shop_type = 2; 				// 商店类型页签ID
	optional int64 refresh_time_stamp = 3; // 获得时间戳,毫秒
	optional int64 opt_type = 4; // 客户端用参数
}

message LabelShopList
{
	required int64 shop_id = 1; // 商店类型页签ID
	repeated ShopItemInfo shop_item_list = 2; // 商品列表
	optional int64 refresh_time = 3; // server 记录刷新点
	optional int64 refresh_count = 4; // 当前刷新次数
	optional int32 shop_type = 5; 				// 商店类型
}

//MSG_C2S_REQ_SHOP_BUY                     = 2198; //购买商店道具
message C2SReqShopBuy
{
	required int64 shop_id = 1;    //商店类型页签ID
	required ShopItemInfo shop_buy_list = 2;    //购买商品
	required int64 refresh_time_stamp = 3; // 刷新时间戳,毫秒
}

//MSG_C2S_REQ_SHOP_REFRESH                      = 2199; //刷新商店物品
message C2SReqShopRefresh
{
	required int64 shop_id = 1;    //商店类型页签ID
}

// MSG_S2C_RSP_REFRESH_SHOP_GOODS            = 2195; // 刷新商店物品
message S2CRspRefreshShopGoods
{
	optional int64 shop_id = 1; // 商店ID
	optional int32 refresh_index = 2; // 更新的格子位置 从0开始至
	optional ShopItemInfo shop_item = 3; // 更新后的商品信息
}

//----------------------------------商店---End-------------------------------------//

//----------------------------------背包道具---Begin-------------------------------------//

// MSG_C2S_REQ_SELL_PACK_ITEM            = 2061; // 出售背包道具
message C2SReqSellPackItem
{
	required int64 config_id        = 1; // 要出售的道具ID
	optional GUID Item_guid        = 2; // 物品的唯一ID（如果有，就只扣除这一堆，没有就全部都可以扣除）
	required int64 count             = 3; // 要出售的道具数量
}

// MSG_C2S_REQ_MULTI_USE_PACK_ITEM                         = 2755;  //批量使用背包物品
message C2SReqMultiUsePackItem
{
	repeated C2SReqUsePackItem use_item_list = 1; // 使用的道具列表
}

// MSG_C2S_REQ_USE_PACK_ITEM             = 2750; // 使用背包道具
message C2SReqUsePackItem
{
	required int64 config_id        = 1; // 要使用的道具ID
	optional GUID Item_guid        = 2; // 物品的唯一ID（如果有，就只扣除这一堆，没有就全部都可以扣除）
	required int64 count             = 3; // 要使用的道具数量
	repeated int64 choose_item      = 4; // 如果是玩家选择的宝箱，则表示玩家选择的分别是哪些条目（Property_Choose表的ID）
	optional GUID use_target      = 5; // 对谁使用
	optional Point2D pos 		  = 6; //迁城道具需要用到的坐标
	optional bool buy_use		  = 7;// 是否购买并使用
	optional int64 officer_type	  = 8;
	optional int64 carpart_type		  = 9;// 部件类型
	optional int64 target_config_id	= 10;// 目标配置id
	repeated string param_list 	  = 11; // 参数列表 param1:简称 param2:全称
}

// MSG_C2S_REQ_ALLIANCE_ROOKIE_PLACE                       = 2753;  //联盟玩家推荐迁城位置
message ReqAllianceRookiePlace
{
	optional int64 item_id						 = 1;
}

// MSG_S2C_RSP_ALLIANCE_ROOKIE_PLACE                       = 2754;  //联盟玩家推荐迁城位置
message S2CRspAllianceRookiePlace
{
	optional Point2D pos = 1; //推荐位置
	optional int64 item_id						 = 2;
}

// MSG_C2S_REQ_JOIN_ALLIANCE_MOVE_PLACE                       = 2756;  //加入联盟迁城
message ReqJoinAllianceMovePlace
{
	optional int64 item_id						 = 1;
}

// MSG_C2S_REQ_JOIN_ALLIANCE_MOVE_TIPS                       = 2757;  //加入联盟迁城tips
message ReqJoinAllianceMoveTips
{
	optional int32 tips = 1;    //数字
}


//MSG_C2S_REQ_BATCH_USE_PACK_ITEM                         = 2752;  //批量使用背包物品(不用于使用物品，某些处理不支持)
message C2SReqBatchUsePackItem
{
	repeated ItemInfo item_list = 1; //使用的道具列表
}


// MSG_S2C_NTF_GET_ITEMS                       = 2751; // 恭喜获得道具
message S2CNtfGetItems
{
	repeated ItemInfo item_list = 1; // 获得的道具列表
	optional int32 reward_notify_type = 2; // 通知类型: enum RewardNotifyType
	repeated ItemInfo extra_item_list = 3; // 额外获得的道具列表
	optional GUID link_uid = 4; // 关联派遣任务的GUID
}

 // MSG_C2S_REQ_SELL_PACK_ITEM_LIST             = 2064; // 批量出售背包道具
message C2SReqSellPackItemList
{
	message SellInfo
	{
			required int64 config_id        = 1; // 要出售的道具ID
			required int64 count             = 2; // 要出售的道具数量
	}
	repeated SellInfo sell_info_list = 1;  //批量出售道具列表
}

//----------------------------------背包道具---End---------------------------------------//

//测试不停服更新
// MSG_C2S_REQ_GAME_SERVER_VERSION
message C2SReqGameServerVersion
{
	optional int32 temp = 1;
}

// MSG_S2C_RSP_GAME_SERVER_VERSION
message S2CRspGameServerVersion
{
	required string game_version = 1;
}
//---------------------------- 测试消息 ----------------------------//
// MSG_C2S_TEST_ROUTER_NET_REQ                 = 440; // 网络路由路径测试消息，发到跨区服范围的测试消息REQ
message C2STestRouterNetReq
{
	required int32 			target_sever_type 	= 1; // 目标服务器类型
	required string 		test_content 		= 2; // 测试内容字符串
}
// MSG_S2C_TEST_ROUTER_NET_RSP                 = 441; // 测试消息，发到跨区服范围的测试消息RSP
message S2CTestRouterNetRsp
{
	required string 		res_content 		= 1; // 回复的内容字符串
}
//---------------------------- 测试消息 End ----------------------------//

message EnemyMark
{
	required GUID enemy_player				 = 1;
	required int64 enemy_end_time			 = 2;	//敌对结束时间
}
//	MSG_NTF_ENEMY_MARK								 = 2608;	//通知敌对标识
message NTFEnemyMark
{
	repeated EnemyMark self_enemy_list					 = 1;	//自己的敌对列表
	repeated EnemyMark alliance_enemy_list				 = 2;	//联盟敌对列表
}


//暂时先写再这，后面旧协议找时间删了

//MSG_S2PUB_REQ_QUERY_PLAYER_BASIC_INFO	  = 3002; 	//查询请求协议
message S2PUBReqQueryPlayerBasicInfo
{
	repeated GUID player_id_list 	= 1;  	//玩家ID
}

//MSG_PUB2S_RSP_QUERY_PLAYER_BASIC_INFO     = 3003; 	//查询返回协议
message PUB2SRspQueryPlayerBasicInfo
{
	repeated PlayerBasicInfo player_basic_info_list = 1;  //玩家信息列表
}

//MSG_S2PUB_RPC_PLAYER_BASIC_INFO             = 50037;  //玩家基础信息查询
message S2PUBReqQueryPlayerBasicInfoRpc
{
	repeated GUID player_id_list 	= 1;  	//玩家ID列表
	repeated PlayerBasicInfo player_basic_info_list = 2;  //玩家信息列表
	optional bool with_alliance = 3;   //是否带联盟简要信息
}

//--------------开服加载----------------------
//	MSG_SYNC_SERVER_DPSTATE						= 1101;
message SyncServerDPState
{
	required int32 state						 = 1;
	optional int32 server_type					 = 2;
	repeated int32 games						 = 3;	//
}

//MSG_NTF_LIMIT_RANK_GROUP_DATA               = 1105;
message SyncRankGroupData
{
	message GroupInfo
	{
        optional int32 group    = 1;
        optional int32 count    = 2;
	}
	repeated GroupInfo group_info_list = 1;
}	
	
	
//--------------玩家个人信息----------------------
//	MSG_C2S_REQ_CHANGE_PLAYER_NAME				= 2281;
message C2SReqChangePlayerName
{
	required string name                        = 1;
	required bool by_gold                       = 2;
}	

//	MSG_C2S_REQ_CHECK_PLAYER_NAME				= 2282;
message C2SReqCheckPlayerName
{
	required string name                        = 1;
}

//	MSG_C2S_REQ_CHANGE_PLAYER_AVATAR			= 2283;
message C2SReqChangePlayerAvatar
{
	optional int32 avatar_id                    = 1; //废弃
	optional int32 avatar_box                   = 2;
	optional string avatar_url                  = 3;
	optional int64  city_dressupid				= 4; //主城装扮id
	repeated KV    sg_dressup_list				= 5; //部队装扮id
	optional int64  title_dressup				= 6; //铭牌装扮id
}

//	MSG_C2S_REQ_SET_EMOJI_GRIDID				= 2069;	// 请求设置表情格子id
message C2SReqSetEmojiGridID
{
	optional int64 emoji_id                     = 1;	//表情id
	optional int32 grid_id                      = 2;	//格子id
}	

//	MSG_S2C_RSP_SET_EMOJI_GRIDID				= 2070;	// 响应设置表情格子id
message S2CRspSetEmojiGridID
{
	optional int64 emoji_id                     = 1;	//表情id
	optional int32 grid_id                      = 2;	//格子id
}

//	MSG_C2S_REQ_LANUCH_EMOJI					= 2071;	// 请求发送表情
message C2SReqLanuchEmoji
{
	optional int64 emoji_id                     = 1;	//表情id
	optional GUID  obj_guid                     = 2;	//发送对象的guid
}

//	MSG_S2C_RSP_LANUCH_EMOJI					= 2072;	// 响应发送表情
message S2CRspLanuchEmoji
{
	optional int64 emoji_id                     = 1;	//表情id
	optional GUID  obj_guid                     = 2;	//发送对象的guid
}

// MSG_GS2SS_RPC_LANUCH_EMOJI					= 50095;//game-->scene发送表情
message RpcLanuchEmoji
{
	optional int64 emoji_id                     = 1;	//表情id
	optional GUID  obj_guid                     = 2;	//发送对象的guid
	optional int64 result						= 3;	//返回結果
}

// MSG_GS2SS_RPC_UPDATE_SG_DRESSUP				= 50096;//game-->scene发送表情
message RpcUpdateSoldierGroupDressUP
{
	repeated KV sg_dressup_list             = 1;	//部队装扮列表
	optional GUID city_guid					= 2;	//主城id
	optional int64 result					= 3;	//返回結果
}

//MSG_C2S_REQ_SET_USE_APPEARANCE              = 2075; // 设置当前使用的装扮
message C2SReqSetUseAppearance
{
	optional int64 appearance_id                = 1;	//装扮id
	optional GUID  obj_guid                     = 2;	//发送对象的guid
}

//MSG_S2C_RSP_SET_USE_APPEARANCE              = 2076; // 响应设置当前使用的装扮
message S2CRspSetUseAppearance
{
	optional int64 appearance_id                = 1;	//装扮id
	optional GUID  obj_guid                     = 2;	//发送对象的guid
}

//MSG_C2S_REQ_SET_PUT_DECORATION              = 2077; // 请求放置装饰
message C2SReqSetPutDecoration
{
	optional int64 item_id        = 1; // 物品id
	optional int32 grid_id		   = 2;	// 要放置格子id
}

//MSG_S2C_RSP_SET_PUT_DECORATION              = 2078; // 响应放置装饰
message S2CRspSetPutDecoration
{
	optional int64 item_id        = 1; // 物品的唯一ID
	optional int32 grid_id		   = 2;	// 要放置格子id
}

//MSG_C2S_REQ_SET_UPGRADE_DECORATION          = 2079; // 请求升级装饰
message C2SReqSetUpgradeDecoration
{
	optional GUID decoration_id		   = 1;	// 升级装饰id
	optional int32 type				   = 2;	//升级类型：1:专用碎片 2：有限专用碎片 专用碎片不足 消耗通用碎片
}

//MSG_S2C_RSP_SET_UPGRADE_DECORATION          = 2080; // 响应升级装饰
message S2CRspSetUpgradeDecoration
{
	optional GUID decoration_id		   = 1;	// 升级装饰id
	optional int32 type				   = 2;	//升级类型：1:专用碎片 2：有限专用碎片 专用碎片不足 消耗通用碎片
}

//MSG_C2S_REQ_SET_UPDATE_DECORATION_GRID      = 2081; // 请求更新装饰格子
message C2SReqSetUpdateDecorationGrid
{
	optional GUID decoration_id		   = 1;	// 要放置装饰
	optional int32 dedst_grid_id		   = 2;	// 目标放置格子id
}

//MSG_S2C_RSP_SET_UPDATE_DECORATION_GRID      = 2082; // 响应更新装饰格子
message S2CRspSetUpdateDecorationGrid
{
	optional GUID decoration_id		   = 1;	// 要放置装饰
	optional int32 dedst_grid_id		   = 2;	// 目标放置格子id
}


//	MSG_C2S_REQ_GET_PLAYER_BASIC_INFO			= 2284;
message C2SReqGetPlayerBasicInfo
{
	required GUID player_id                 	= 1;
}

//	MSG_S2C_RSP_GET_PLAYER_BASIC_INFO			= 2285;
message S2CRspGetPlayerBasicInfo
{
	required GUID player_id                 	= 1;
	optional PlayerBasicInfo player_info 		= 2;
}	

//	MSG_GS2LS_RPC_CHANGE_PLAYER_NAME			= 50081;
message GS2LSRpcChangePlayerName
{
	optional int64 result                 	    = 1;
	required GUID player_id                     = 2;
	required string new_name                    = 3;
	required string old_name                    = 4;
}

//	MSG_S2S_RPC_INCR_ENERGY					= 50082;
message S2SRpcIncrEnergy
{
	optional int64 result                 	    = 1;
	required GUID city_id      	    	        = 2;
	required int32 value    	                = 3;
}		

//	MSG_GS2LS_RPC_CHECK_PLAYER_NAME			 = 50084;
message GS2LSRpcCheckPlayerName
{
	optional int64 result                 	    = 1;
	required string name                        = 2;
}	

//	MSG_S2S_NTF_INCR_ENERGY					= 2276;
message S2SNtfIncrEnergy
{	
	required GUID city_id      	    	        = 1;
	required int32 value    	                = 2;
}	

// MSG_C2S_COMPLETE_USER_GUIDE											 = 2854;	//完成新手引导
message C2SReqCompleteUserGuide
{
	optional int64 config_id                 	    = 1;
}	

//	MSG_C2S_REQ_GET_ACCOUNT_ROLE_LIST		= 2286;
message C2SReqGetAccountRoleList
{
	optional string account 				    = 1; //可以由服务器填写
}

//	MSG_S2C_RSP_GET_ACCOUNT_ROLE_LIST		= 2287;
message S2CRspGetAccountRoleList
{
	optional string account 				    = 1;
	repeated PlayerBasicInfo role_list 			= 2;
}

// MSG_S2C_BROADCAST_NTF						= 14600; // 推送跑马灯消息
message S2C_BROADCAST_NTF
{
	required int64 broadcast_id					= 1;
	optional PbDataList data					= 2;
}	
//	MSG_S2S_FUNCTIONOPERATER					= 2060;
message S2SFunctionOperater
{
	required int32 operater		= 1;	// 操作类型 0 关闭 1 开启
	repeated int64 ConfigIDList = 2;	// 功能ID列表
}

//	MSG_NTF_FUNCTION_CLOSE_LIST					= 2059;
message NTFFunctionCloseList
{
	repeated int64 ConfigIDList = 1;	// 功能ID
}	

//	MSG_S2C_REQ_GUIDED_STORY_FINISH				= 503;	// 引导剧情完成
message ReqGuidedStoryFinish
{
	optional int32 step					 = 1;	//暂时不需要
}

//	MSG_C2S_REQ_GET_FREE_REWARD			  = 2018; // 免费试用
message C2SReqGetFreeReward
{
	enum FreeRewardBit
	{
		CITY_BUILD_WORKER = 0; //免费城建队列
	}
	optional int32 id = 1;
}

// MSG_C2S_REQ_FAQ_REWARD                      = 2019; // FAQ问卷奖励
message C2SReqFAQReward
{
	enum FAQDoneBit
	{
		FAQ = 0; //问答
		DISCORD = 1; // discord
		CLV_6 = 2; // 城堡等级到6后弹出
		FAQ_NEW = 3; //新增问卷
	}
	optional int32 id = 1; // 问卷ID
}

///////服务器红点
enum ERedPointType
{
	ERedPoint_AllianceHelp  		= 1;  	//联盟帮助
	ERedPoint_AllianceAudit 		= 2;  	//联盟审核
	ERedPoint_AllianceGift  		= 3;    //联盟礼物
	ERedPoint_AllianceBuilding 		= 4;  //联盟建筑
	ERedPoint_AllianceNpcTownWar	= 5;  //联盟npcTown 被宣战
}

message RedPointData
{
	optional int32 type 	= 1;  //类型
	optional int64 count 	= 2;  //红点数量 
}


message NtfPlayerRedPoint
{
	repeated RedPointData red_point_list = 1;   //红点数据
}

// 激活套装 MSG_C2S_REQ_ACTIVESTAGE
message C2SReqActiveStage
{
	optional int64 nCarID = 1;
}


// 进阶 MSG_C2S_REQ_STAR_UPGRADE
message C2SReqStarUpGrade
{
	optional int64 nCarID = 1;// 部件类型
}

//VIP
enum EGetVIPRewardType
{
	EGetVIPRewardType_VIPEXP  	= 1;  	//VIP点数
	EGetVIPRewardType_FreePack 	= 2;  	//每日免费礼包
	EGetVIPRewardType_PayPack  	= 3;    //等级付费礼包
}
//	MSG_C2S_REQ_GET_VIP_REWARD						= 14611;//请求领取每日VIP点数
message ReqGetVIPReward
{
	required int32 type 	= 1;//领取类型，1，每日点数；2，每日免费礼包；3.付费礼包
	optional int64 level = 2;	//付费礼包属于哪个等级
}

message CarPartInfo
{
	optional int32 nType = 1;
	optional int64 configid = 2;// 配置ID
	optional int64 exp = 3;// 当前经验
}
message LevelPayPackInfo
{
	optional int64 level 	= 1;  //VIP等级
	optional bool is_get_pay_pack 	= 2;  //是否购买付费礼包
	optional bool is_get_free_pack = 3;	//是否领取每日免费礼包
	optional bool is_next_get_free_pack = 4; //是否可以领取 月卡购买后的额外奖励		
}
//	MSG_S2C_VIP_INFO_CHANGE_NTF						= 14612;//VIP信息变化通知
message NtfVIPInfo
{
	optional int64 level = 1;	//当前等级
	optional int64 Exp = 2;				//经验值
	optional bool is_get_daily_exp = 3;	//是否领取每日vip点数
	optional bool is_get_free_pack = 4;	//是否领取每日免费礼包
	repeated LevelPayPackInfo pay_pack_info_list = 5;	//等级付费礼包购买信息
	optional bool is_up_level	= 6; 	//是否提升等级
}
//	MSG_C2S_REQ_BUY_VIP_EXP							= 14613;//请求齿轮币购买vip经验
message ReqBuyVIPExp
{
	optional int64 exp				 = 1;	//购买vip的数量
}

//MSG_C2S_REQ_BUY_VIP_TIME					    = 14614;//请求VIP时间购买(并使用)
message C2SReqBuyVipTime
{
	optional int64 itemid = 1;
}

//MSG_S2C_VIP_ACTIVATE_NTF					    = 14615;//VIP时间激活通知
message S2CVipActivateNtf
{
	optional int64 activate_time = 1;   //本次激活时间
}
    
// MSG_S2CNTF_CAR_UPGRADE_INFO
message S2CNTFCarUpgradeInfo
{
	repeated CarInfo CarList = 1;
	
	optional int32 nOptType = 2;// 操作0：全量更新 1：激活车辆 2 升级车辆 3：升星车辆 4:车状态更新（上城墙 和 行军等）
}

// MSG_C2S_REQ_STARTEVENTGROUP= 3310 前往
message C2SReqStartEventGroup
{
	optional int64 group_config_id = 1;
	optional int32 nopetate = 2;
	optional int64 uid = 3; // 实例ID
}


// MSG_C2S_REQ_FINISHEVENT  请求完成某个事件
message C2SReqFinishEvent
{
	optional int64 group_config_id = 1;
	optional int64 payindex = 2; // 目前给交易 参数1 损失选 0,1,2
	optional int64 getindex = 3; // 目前给交易 参数2 得选 0,1,2
}


// MSG_C2S_REQ_DEAL_EVENT 请求操作 进入副本、选项等
message C2SReqDealEvent
{
	optional int64 group_config_id = 1;	
	optional int64 param = 2; // 对话选项和 交易 参数1 损失选 0,1,2
	optional int64 param2 = 3; // 目前给交易 参数2 得选 0,1,2

	optional EventRpgDungeonParam rpg_param	 = 4;	//rpg副本类型事件参数
}

// 	MSG_C2S_REQ_REFRESH_EVENT				  = 3314;// 手动刷新事件
message C2SReqRefreshEvent
{	
}

// 	MSG_C2S_REQ_GETCOMPLETE_GROUP_REWARD				  = 3315;// 领取事件组奖励
message C2SReqGetCompleteGroupReward
{	
	repeated int64 group_config_id_list = 1;	
	optional int32 auto_all = 2; // 领取所有 0:默认 1:全部领取
	repeated int64 uid_list = 3; // 实例ID列表
}
//	MSG_C2S_REQ_GET_EXPLORE_LEVEL_AWARD       = 3317; // 领取雷达等级奖励
message ReqGetExploreLevelAward
{
	optional int32 type			 = 1;		//0 按照 level_id 领取，1 全部领取
	optional int64 level_id		 = 2;
}
	
// MSG_GS2SS_RPC_EXPLORE_CREATE_MONSTER		 = 50122;	// G 2 S 创建演员野怪
message GS2SRPCCreateExploreMonster
{
	optional int64 monster_config_id = 1;	
	optional Point2D pos = 2;
	optional GUID city_id = 3;
	optional int32 result = 4;
	optional int64 event_group_id = 5;//事件组ID
	optional GUID monster_guid = 6;
	optional int64 incident_type = 7;	
	optional int32 min_dis = 8;
	optional int32 max_dis = 9;
	optional int32 event_type = 10; // 事件类型 2:野怪 11:资源田
	optional int32 event_id = 11; // 事件ID
	optional int64 event_group_config_id = 12; // 事件组配置ID
}

//MSG_GS2SS_DELETE_EXPLORE_MONSTER		  = 3313;// 删除过期的探索野怪
message GS2SSDeleteExploreMonster
{
	repeated GUID monster_guids = 1;//
}

//	MSG_C2S_REQ_TRIGGER_GAME_EVENT	            = 2123; // 触发游戏事件
message ReqTriggerGameEvent
{	
	enum EventSourceType
	{
		EST_ShelterNpc		 = 1;
		EST_ExploreNpc 		 = 2;
		EST_AllIncidentNpc   = 3;
		EST_Affair		 	 = 4; // 事务
		EST_ShelterNpcDaily   = 5;//避难所，固定刷新资源堆事件。
	}	
	optional int32 source_type				 = 1;	//EventSourceType
	optional int64 event_id					 = 2;	//event id
	repeated int64 int_params				 = 3;	//EST_ShelterNpc 填npc id
	optional bool npc_position_update		 = 4;	//事件完成后是否需要更新npc位置
	optional Point3D npc_position			 = 5;
	optional Point3D npc_dir				 = 6;
	optional EventRpgDungeonParam rpg_param	 = 7;	//rpg副本类型事件参数
	optional int64 resident_uid				 = 8;	//居民guid
	optional int64 resident_target_npc		 = 9;	//居民采集目标npcid
	optional int64 event_param				 = 10;	//事件参数（目前有对话选项的选择结果）
	optional int32 unlock_new				 = 11;  // 1:解锁新流程 0:旧包需要直接完成
}
//	MSG_S2C_NTF_REFUGE_EVENT_AWARD	            = 2127; // 通知客户端避难所事件奖励
message NtfRefugeEventAward
{
	optional int64 event_id					 = 1;
	optional int64 drop_id					 = 2;
	repeated ItemInfo award_items			 = 3;
}

	
//	MSG_C2S_REPORT_INDEPENDENT_EVENT            = 1086; // 客户端上报一些特殊的独立事件完成
message ReportIndependentEvent
{
	enum IndependentEventType
	{
		IET_LoginRpgDungeon				 = 1;	//第一次登录rpg副本
		IET_EnterShelterAnimation		 = 2;	//第一次进入避难所动画
		IET_EnterGameCG					 = 3;	//第一次进入游戏cg
		IET_APPRAISE_REWARD				 = 4;	//第一次评分奖励
		IET_FOLLOW_OFFICIAL_MEDIA		 = 5;	//第一次社媒关注奖励
		IET_FIRST_JOIN_ALLIANCE			 = 6;	//第一次加入联盟


		IET_FirstLoading_Start			 = 7;	//第一次loading开始
		IET_FirstLoading_Finish			 = 8;	//第一次首次loading结束
		IET_CG_Start			 		 = 9;	//首次登录CG开始播放时
		IET_CG_Skip			 			 = 10;	//首次登录CG播放时点击跳过按钮
		IET_CG_Finish			 		 = 11;	//首次登录CG播放完成
		IET_CG_PrePlay			         = 12;	//准备播放首次登录CG
		IET_CG_Error			         = 13;	//首次登录CG播放出错
		IET_EnterNewBeeLevel			 = 14;	//进入新手关（EnterNewBeeLevel）
		IET_DateVersionRepairReward		 = 15;	//前期流程调整数据修复公告

		IET_LoginCpmDungeon				 = 16;	//第一次登录cpm副本
	}
	optional int32 event_type				 = 1;	//IndependentEventType
}	

//	MSG_C2S_REQ_ENTER_DUNGEON_LIST	            = 2124; // 进入关卡选择副本
message ReqEnterDungeonList
{		
	optional int32 nIndex				 	 = 1;	//进入第几关
	optional EventRpgDungeonParam rpg_param	 = 2;	//rpg副本类型事件参数
	optional int64 grid_id					 = 3;	//AreaGrid 进入的dungeonlist 会带这个参数
	optional int32 step						 = 4;	//AreaGrid 进入的dungeonlist 会带这个参数
}

//	MSG_C2S_REQ_FIRST_REFRESH_EXPLORE	            = 3316; // 第一次刷新探索
message ReqFirstRefreshExplore
{			
}
//	MSG_C2S_REQ_REFUGE_AREA_UNLOCK	            = 2125; // 解锁区域 清除迷雾状态
message ReqRefugeAreaUnlock
{
	optional int64 area_id					 = 1;	//区域id
}


//MSG_S2C_PUSH_GIFT_LIST = 3320;                  //推送礼包列表
message PushGift
{
	optional int64 charge_bag_id 		= 1;  //充值礼包ID
	optional int64 push_gift_id 		= 2;  //推送礼包ID
	optional int64 expire_time          = 3;  //过期时间
	optional int32 limit                = 4;  //购买限制次数
}

message S2CPushGiftList
{
	repeated PushGift push_gift_list = 1;   //推送礼包列表 
}


//MSG_NTF_PUSH_GIFT_UPDATE = 3321;             //通知推送礼包
message NtfPushGiftUpdate
{
	enum UpdateType
	{
		CHANGE_LIMIT = 1; //限制次数变化
		ACTIVATED    = 2; //激活
		REMOVE		 = 3; //从推送列表中移除
	}

	optional int32 type = 1;           		//更新类型
	optional PushGift push_gift = 2;   //礼包 
}

message PushGiftInfoDB
{
	message ChargeBagData
	{
		optional int64 charge_bag_id = 1;
		optional int64 expire_time = 2;
		optional int64 limit = 3;
		optional int64 push_gift_id = 4;
	}

	message PushGiftCountData
	{
		optional int64 push_gift_id = 1;
		optional int32 count = 2;
	}

	message ChargeBagGroupPushIndex
	{
		optional int64 charge_bag_group_id = 1;
		optional int64 push_index = 2;
		optional int64 pushgift_id = 3;
	}

	message PushGiftData
	{
		optional int32 type = 1;  //推送礼包类型
		optional int32 index = 2;  //推送索引  弃用
		repeated ChargeBagData charge_bag_list = 3;  //已经推送的充值礼包列表
		repeated PushGiftCountData push_gift_count_list = 4;  //礼包推送的次数
		repeated ChargeBagGroupPushIndex push_index_list = 5;  //推送索引
	}

    message TodayUseItemList
	{
		optional int64 xItem = 1;
		optional int64 ItemCount = 2;
	}
	repeated PushGiftData push_gift_data_list = 1;  //推送礼包数据
	repeated TodayUseItemList today_item_list = 2;  //今日获得得礼包
}

//    MSG_S2C_FIRST_RPG_FINISH = 14621;
message S2CFirstRPGFinish
{
	optional bool pass = 1;  //是否通过
}

//	MSG_C2S_REQ_SET_GAME_SETTING		= 2288;
message C2SReqSetGameSetting
{
	required int64 config_id = 1; //需要修改的配置ID
	required int64 value 	 = 2; //修改成的值
}

//	MSG_LS2GS_REQ_MOVE_PLAYER_NAME		= 2290;
message LS2GSReqMovePlayerName
{
	repeated GUID player_ids = 1;
	repeated string names = 2;	
}

message SDKMessagePushPlayerData
{
	optional string igg_id					 = 1;
	optional int64 language					 = 2;
	optional int64 platform					 = 3;
	optional int64 target_server_type		 = 4; //目标服务器类型
	repeated string params					 = 5;
}
//MSG_S2GS_REQ_SDK_MESSAGE_PUSH  	= 3351
//MSG_S2AS_REQ_SDK_MESSAGE_PUSH  	= 3352
//MSG_GS2WS_REQ_SDK_MESSAGE_PUSH  	= 3353
message S2SSDKMessahePush
{
	repeated GUID ids = 1;
//	repeated string igg_ids = 2;
	optional int64 push_config_id = 3;
//	repeated int64 language = 4;
//	repeated int64 platform = 5;  // 0:android 1:ios 
//	repeated int64 target_server_type = 6; //目标服务器类型
	repeated SDKMessagePushPlayerData datas = 7;
	optional int64 push_time = 8;
}

// MSG_S2S_OUTSIDE_CAR_INFO_UPDATE           = 3304;//在外载具信息更新
message S2SOutSideCarInfoUpdate
{
	optional int32 opt 		= 1; // 操作类型
 
	optional ScenceCarInfo car 	= 2; // 载具信息
}
// NPC 派遣信息
message NpcDispatchInfo
{
	optional int64 nConfigID = 1;		// NPC ID
	optional int32 nLevel = 2;			// NPC 等级
	repeated int32 vecGotLevel = 3;		// NPC 领取等级
	optional int64 nExp = 4;			// NPC 经验

	optional int64 nBuildID = 5;		// NPC 派遣建筑 ID
	optional int32 nSlotID = 6;			// 派遣的槽位ID
}

// MSG_S2C_NTF_NPC_INFO           = 3350;//NPC派遣信息更新
message S2CNTFNpcInfo
{
	optional int32 opt 		= 1; // 操作类型 0 :同步 1：升级 2：领取 3 : 派遣 4 : 获得 5 : 一键获取
 
	repeated NpcDispatchInfo npcs 	= 2; // NPC 派遣信息
}

// MSG_C2S_REQ_GET_NPC_REWARD = 3351;// 获取NPC奖励
message C2SReqGetNpcReward
{
	optional int64 nConfigID = 1;		// NPC ID
	optional int64 nLevel = 2;		// NPC领取的等级
}

// MSG_C2S_REQ_DISPATCH_NPC = 3352;// 派遣Npc
message C2SReqDispatchNpc
{
	optional int64 nConfigID = 1;		// NPC ID
	optional int64 nBuildID = 2;		// 建筑 ID
	optional int64 nSlotID = 3;			// 槽位 ID
}

// MSG_C2S_REQ_ONE_KEY_DISPATCH_NPC = 3347;// 派遣Npc
message C2SReqOneKeyDispatchNpc
{
	repeated C2SReqDispatchNpc lsitDispatch =1;
}

//	MSG_C2S_REQ_RISK_STATE_REMOVE	            = 2126; // 移除满危险值的状态
message ReqRiskStateRemove
{
	
}
//	MSG_S2C_NTF_MAIN_MAP_AREA_UNLOCK                = 2530;     //服务器通知客户端大地图区域解锁时间
message NTFMainMapAreaUnlock
{
	repeated MainMapAreaInfo area_info_list				 = 1;
	optional int32 area_id								 = 2;
}
message MainMapAreaInfo
{
	optional Point2D key_position				 = 1;		//区域 左下坐标
	optional int32 hori_length					 = 2;		//区域 水平（x）方向长度
	optional int32 vert_length					 = 3;		//区域 垂直（y）方向长度
	optional int64 unlock_time					 = 4;		//解锁时间戳 毫秒
}

// MSG_MS2WS_REQ_SDK_WARNING                             = 3354;// sdk报警
message S2SReqSDKWarning
{
	optional int32 nType					 	= 1;	
	repeated string warning_list				= 2;
}
//	MSG_RPC_ITEM_CHANGE					= 50131;// 使用联盟boss强化物品
message RpcItemChange
{
	optional int32 result						 = 1;
	optional GUID player_id						 = 2;
	optional int64 cost_item_count				 = 3;	//消耗物品数量
	optional int64 cost_item_id					 = 4;	//消耗物品
	
	optional int64 get_drop_id					 = 5;	//获得drop id
	optional int64 get_drop_count				 = 6;	//获得drop 数量
	optional int32 drop_ntf_type				 = 7;
	optional int32 source_type					 = 8;	//修改功能来源类型 SGDefine::RewardSourceType
}

// MSG_C2S_GET_RANDOM_POS                  = 3348;// 探索获取可用点
// MSG_S2C_GET_RANDOM_POS                                = 3349;// 探索获取可用点回复
message C2SGetRandomPos
{
	optional int32 source_type						 = 1;
	optional int64 source_configid					 = 2;
	optional Point2D pos  							 = 3;
}

// MSG_GS2SS_RPC_EXPLORE_GET_POS                  = 50140;// 探索获取可用点
message GS2SSRpcExploreGetPos
{
	optional int32 result						 = 1;
	optional int32 minDis						 = 2;
	optional int32 maxDis						 = 3;
	optional Point2D pos						 = 4;
	optional GUID city_id						 = 5;
}

// MSG_C2S_DIALOG_GET_REWARD		= 3350; // 获取对话奖励
message C2SDialogGetReward
{
	optional int32 source_type						 = 1;
	optional int64 source_configid					 = 2;
	optional int64 dialog_id					 		 = 3;
}

//  MSG_C2S_REQ_SET_CLIENT_VAR                  = 2066; // 设置前端的变量
message ReqSetClientVar
{
	required string VarKey = 1; // 
	required int64 VarValue = 2; // 
}

//  MSG_C2S_REQ_SET_CLIENT_VAR                  = 2066; // 设置前端的变量,string类型的
message ReqSetClientVarString
{
	required string VarKey = 1; // 
	required string VarValue = 2; // 
}

// MSG_C2S_REQ_SET_USE_SKIN                    = 2067; // 设置当前使用的主城皮肤
message ReqSetUseSkin
{
	required int64 SkinID = 1; // 
}

// MSG_S2S_RPC_SET_SKIN                            = 50403;  //设置主城皮肤。增加pi
message RpcCallSetUseSkin
{
	optional GUID CityID = 1; // 
	optional GUID xPlayreID = 2; // 
	optional int64 SkinID = 3; // 
	optional int64 nSetResult = 4; // 
	optional int64 OldSkinID = 5; // 
}
//	MSG_S2S_NTF_TAKE_REWARD_BOX						= 2537;	//捡取地图宝箱
message NtfTakeRewardBox
{
	optional GUID box_id					 = 1; // 
	optional int64 box_cfg_id				 = 2; // 
	optional int32 box_type				 = 3; //
	optional int64 type_param			 = 4; //
}
//	MSG_S2C_NTF_SOLDIER_GROUP_GET_REWARD_BOX		= 2538;	//通知客户端已经捡取宝箱
message NtfSoldierGroupGetRewardBox
{
	optional GUID box_id					 = 1; // 
	optional int64 box_cfg_id				 = 2; // 
	optional GUID sg_id						 = 3; // 捡取宝箱的队伍guid
}

//----------------------------------充值---Begin-------------------------------------//

//MSG_C2S_REQ_BUY_CHARGE_BAG
message C2SReqBuyChargeBag
{
	optional int64 charge_pcid = 1    ; // ChargeBag配置表pcid
}
//地块
//	MSG_C2S_REQ_DO_GRID_STEP					= 3980;	//请求执行地块阶段逻辑
message ReqDoGridStep
{
	optional int64 grid_id				 = 1;	//地块表配置id
	optional int32 step					 = 2;	//阶段，1、2、3、4、5、6 ...
}
//	MSG_S2C_RSP_DO_GRID_STEP					= 3981;	//请求执行地块阶段逻辑应答，只有出错才会有，正常执行地块阶段数据会变化
message RspDoGridStep
{
	optional int64 grid_id				 = 1;	//地块表配置id
	optional int32 step					 = 2;	//阶段，1、2、3、4、5、6 ...
	optional int32 error_code			 = 3;	//错误码，采用服务器跟客户端之间使用的 show string msg
}

//----------------------------------test---Begin-------------------------------------//
// 同步测试日志
//MSG_NTF_SERVER_TEST_LOG = 137
message NtfServerTestLog
{
	optional string log = 1; //测试日志
}
//	MSG_C2S_REQ_GET_FREE_ENERGY					= 2415;	//获取定时刷新的免费体力
message ReqGetFreeEnergy
{
	
}

// MSG_C2S_REQ_BUY_ENERGY					    = 2416;	//请求购买体力
message C2SReqBuyEnergy
{
	optional int64 buy_count = 1;			//购买次数
}

//---------------------------------载具APC---Begin-------------------------------------//

//改装车信息
message PlayerApcInfo
{
	message PlayerApcPartInfo
	{
		optional int32 ApcPart = 1;		//部件位置
		optional int32 PartLevel = 2;	//部件等级
	}
	optional int32 ApcLevel = 1;						//改装车等级
	repeated PlayerApcPartInfo PlayerApcPartInfoList = 2;	//改装车部件列表
	optional int64 Power = 3;			//战力
}

//MSG_C2S_REQ_APC_LEVEL_UP                                             = 4050;    //改装车升级
message C2SReqApcLevelUp
{
	
}

//MSG_C2S_REQ_APC_PART_LEVEL_UP                                        = 4052;    //载具配件升级
message C2SReqApcPartLevelUp
{
	optional int32 part = 1;    //载具配件部位
}

//---------------------------------怪物奖励-------------------------------------//
//怪物击杀奖励
message MonsterKillAward
{
    optional GUID guid = 1; //奖励guid
    optional int64 monster_id = 2;// 怪物配置ID	
    optional int32 level = 3;   //怪物等级
    repeated ItemInfo item_infos = 4;   //击杀奖励
    optional bool bfirst_kill = 5;  //是否首杀
    optional int32 sg_type = 6;    //1 独立部队，2 发起集结，3 参与集结
	optional int32 cost_energy = 7;
}

message S2CRspMonsterAwardNotify
{
	enum AwardNotify
	{
		PACK	 	    = 0; // 全量包
        ADD 		    = 1; // 新增怪物奖励
        DEL             = 2; // 删除指定怪物奖励
	}

    optional int32 notify_type = 1;
    repeated MonsterKillAward monster_award_list = 2;
}

// MSG_C2S_REQ_MONSTER_AWARD_LIST              = 7600; //请求怪物奖励列表
// 请求结构空:EmptyMsg

// MSG_C2S_REQ_GET_MONSTER_AWARD               = 7602; //一键领取怪物奖励
// 请求结构空:EmptyMsg

