// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGDefine.proto

#include "SGDefine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SGDefine {
}  // namespace SGDefine
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SGDefine_2eproto[51];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SGDefine_2eproto = nullptr;
const uint32_t TableStruct_SGDefine_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_SGDefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SGDefine.proto\022\010SGDefine*M\n\014ZKServerTy"
  "pe\022\035\n\031ZK_SERVER_TYPE_IN_BIGAREA\020\000\022\036\n\032ZK_"
  "SERVER_TYPE_OUT_BIGAREA\020\001*\363\005\n\013server_typ"
  "e\022\024\n\020SERVER_TYPE_SELF\020\000\022\026\n\022SERVER_TYPE_C"
  "LIENT\020\001\022\026\n\022SERVER_TYPE_WEBSDK\020\004\022\024\n\020SERVE"
  "R_TYPE_GMIP\020\005\022\026\n\022SERVER_TYPE_CONFIG\020\006\022\026\n"
  "\022SERVER_TYPE_MASTER\020\007\022\025\n\021SERVER_TYPE_LOG"
  "IN\020\010\022\027\n\023SERVER_TYPE_GATEWAY\020\t\022\022\n\016SERVER_"
  "TYPE_DB\020\n\022\024\n\020SERVER_TYPE_GAME\020\013\022\026\n\022SERVE"
  "R_TYPE_PUBLIC\020\014\022\025\n\021SERVER_TYPE_GUILD\020\r\022\024"
  "\n\020SERVER_TYPE_MAIL\020\016\022\024\n\020SERVER_TYPE_CHAT"
  "\020\017\022\030\n\024SERVER_TYPE_SECURITY\020\020\022\030\n\024SERVER_T"
  "YPE_DUNGEONS\020\021\022\024\n\020SERVER_TYPE_HTTP\020\026\022\026\n\022"
  "SERVER_TYPE_ROUTER\020\027\022\025\n\021SERVER_TYPE_MATC"
  "H\020\030\022\024\n\020SERVER_TYPE_AUTH\020\031\022\032\n\026SERVER_TYPE"
  "_DATACENTER\020\032\022\026\n\022SERVER_TYPE_FRIEND\020\033\022\025\n"
  "\021SERVER_TYPE_GUARD\020\034\022\024\n\020SERVER_TYPE_TEST"
  "\020\035\022\026\n\022SERVER_TYPE_SCENCE\020\036\022\033\n\027SERVER_TYP"
  "E_SCENCECLONE\020\037\022\030\n\024SERVER_TYPE_ALLIANCE\020"
  " \022\025\n\021SERVER_TYPE_CROSS\020!\022\032\n\026SERVER_TYPE_"
  "CROSS_GATE\020\"\022\034\n\030SERVER_TYPE_CROSS_SCENCE"
  "\020#\022\023\n\017SERVER_TYPE_END\020$*\204\017\n\020ItemResource"
  "Type\022\033\n\027ITEM_RESOURCE_TYPE_NONE\020\000\022\037\n\033ITE"
  "M_RESOURCE_TYPE_CURRENCY\020\001\022\037\n\033ITEM_RESOU"
  "RCE_TYPE_ADDSPEED\020\002\022 \n\034ITEM_RESOURCE_TYP"
  "E_HERO_CHIP\020\003\022\033\n\027ITEM_RESOURCE_TYPE_HERO"
  "\020\004\022#\n\037ITEM_RESOURCE_TYPE_HEROE_GROWUP\020\005\022"
  "#\n\037ITEM_RESOURCE_TYPE_TREASURE_BOX\020\006\022&\n\""
  "ITEM_RESOURCE_TYPE_CURRENCY_IN_BAG\020\007\022 \n\034"
  "ITEM_RESOURCE_TYPE_CITY_MOVE\020\010\022\036\n\032ITEM_R"
  "ESOURCE_TYPE_RECRUIT\020\t\022#\n\037ITEM_RESOURCE_"
  "TYPE_SOLDIER_ITEM\020\n\022%\n!ITEM_RESOURCE_TYP"
  "E_RECRUIT_CREDIT\020\013\022 \n\034ITEM_RESOURCE_TYPE"
  "_SHOW_TIPS\020\014\022\037\n\033ITEM_RESOURCE_TYPE_DRESS"
  "_UP\020\r\022\"\n\036ITEM_RESOURCE_TYPE_CHANGE_NAME\020"
  "\016\022\036\n\032ITEM_RESOURCE_TYPE_ADDBUFF\020\017\022#\n\037ITE"
  "M_RESOURCE_TYPE_CALL_MONSTER\020\020\022\037\n\033ITEM_R"
  "ESOURCE_TYPE_ALLIANCE\020\021\022\"\n\036ITEM_RESOURCE"
  "_TYPE_CITY_GROWUP\020\022\022%\n!ITEM_RESOURCE_TYP"
  "E_EQUIP_MATERIAL\020\023\022 \n\034ITEM_RESOURCE_TYPE"
  "_CAR_UPGRA\020\024\022\037\n\033ITEM_RESOURCE_TYPE_CAR_S"
  "TAR\020\025\022\037\n\033ITEM_RESOURCE_TYPE_VIPPOINT\020\026\022\033"
  "\n\027ITEM_RESOURCE_TYPE_NOTE\020\027\022$\n ITEM_RESO"
  "URCE_TYPE_UNLOCK_WORKER\020\030\022\'\n#ITEM_RESOUR"
  "CE_TYPE_UPGRADE_BUILDING\020\031\022%\n!ITEM_RESOU"
  "RCE_TYPE_SHELTER_UNLOCK\020\032\022!\n\035ITEM_RESOUR"
  "CE_TYPE_RED_PACKET\020\033\022!\n\035ITEM_RESOURCE_TY"
  "PE_CAR_ACTIVE\020\034\022#\n\037ITEM_RESOURCE_TYPE_NP"
  "C_DISPATCH\020\035\022$\n ITEM_RESOURCE_TYPE_ALLIA"
  "NCE_GIFT\020\036\022!\n\035ITEM_RESOURCE_TYPE_HERO_EQ"
  "UIP\020\037\022$\n ITEM_RESOURCE_TYPE_AUTO_OPEN_BO"
  "X\020 \022(\n$ITEM_RESOURCE_TYPE_BATTLE_PASS_SC"
  "ORE\020!\022\036\n\032ITEM_RESOURCE_TYPE_MIGRATE\020\"\022(\n"
  "$ITEM_RESOURCE_TYPE_DUNGEONLISTREWARD\020#\022"
  "\037\n\033ITEM_RESOURCE_TYPE_FACILITY\020$\022\033\n\027ITEM"
  "_RESOURCE_TYPE_SKIN\020%\022%\n!ITEM_RESOURCE_T"
  "YPE_FURNITURE_COST\020&\022\035\n\031ITEM_RESOURCE_TY"
  "PE_DEVICE\020\'\022\"\n\036ITEM_RESOURCE_TYPE_DAILY_"
  "SCORE\020(\022\'\n#ITEM_RESOURCE_TYPE_TIME_LIMIT"
  "_MATCH\020)\022\"\n\036ITEM_RESOURCE_TYPE_ESCORT_IT"
  "EM\020*\022 \n\034ITEM_RESOURCE_TYPE_LEVEL_BOX\020+\022\035"
  "\n\031ITEM_RESOURCE_TYPE_LEGEND\020,\022\"\n\036ITEM_RE"
  "SOURCE_TYPE_LEGEND_CHIP\020-\022\032\n\026ITEM_RESOUR"
  "CE_TYPE_APC\020.\022\032\n\026ITEM_RESOURCE_VIP_TIME\020"
  "/\022 \n\034ITEM_RESOURCE_VIP_TIME_POINT\0200\022\035\n\031I"
  "TEM_RESOURCE_GLORY_SCORE\0201\022\037\n\033ITEM_RESOU"
  "RCE_TYPE_RESIDENT\0202\022$\n ITEM_RESOURCE_TYP"
  "E_RESIDENT_CHIP\0203\022\034\n\030ITEM_RESOURCE_TYPE_"
  "EMOJI\0204\022!\n\035ITEM_RESOURCE_TYPE_DECORATION"
  "\0205\022\032\n\026ITEM_RESOURCE_TYPE_END\0206*\204\001\n\016HeroB"
  "elongType\022\031\n\025HERO_BELONG_TYPE_NONE\020\000\022\033\n\027"
  "HERO_BELONG_TYPE_PLAYER\020\001\022\034\n\030HERO_BELONG"
  "_TYPE_MONSTER\020\002\022\034\n\030HERO_BELONG_TYPE_SPEC"
  "IAL\020\003*\273\025\n\013ItemSubType\022\026\n\022ITEM_SUB_TYPE_N"
  "ONE\020\000\022\027\n\022ITEM_SUB_TYPE_GOLD\020\220N\022\032\n\025ITEM_S"
  "UB_TYPE_ONE_OIL\020\221N\022\033\n\026ITEM_SUB_TYPE_TWO_"
  "IRON\020\222N\022\035\n\030ITEM_SUB_TYPE_THREE_FOOD\020\223N\022\035"
  "\n\030ITEM_SUB_TYPE_FOUR_WATER\020\224N\022\031\n\024ITEM_SU"
  "B_TYPE_POINTS\020\225N\022\033\n\026ITEM_SUB_TYPE_PAY_GO"
  "LD\020\226N\022\032\n\025ITEM_SUB_TYPE_DUNGEON\020\227N\022\030\n\023ITE"
  "M_SUB_TYPE_ARENA\020\230N\022\030\n\023ITEM_SUB_TYPE_ORD"
  "ER\020\231N\022\031\n\024ITEM_SUB_TYPE_DOLLAR\020\232N\022\"\n\035ITEM"
  "_SUB_TYPE_MIN_GAME_ENERGY\020\234N\022\031\n\024ITEM_SUB"
  "_TYPE_RESCUE\020\235N\022\"\n\035ITEM_SUB_TYPE_HERO_CO"
  "MMON_EXP\020\236N\022!\n\034ITEM_SUB_SHUGUANGZHILU_SC"
  "ORE\020\237N\022\036\n\030ITEM_SUB_TYPE_BUILDSPEED\020\245\234\001\022\036"
  "\n\030ITEM_SUB_TYPE_STUDYSPEED\020\246\234\001\022\035\n\027ITEM_S"
  "UB_TYPE_CURESPEED\020\247\234\001\022\036\n\030ITEM_SUB_TYPE_T"
  "RAINSPEED\020\250\234\001\022\036\n\030ITEM_SUB_TYPE_COMONSPEE"
  "D\020\251\234\001\022\034\n\026ITEM_SUB_TYPE_VIPPOINT\020\361\253\001\022\030\n\022I"
  "TEM_SUB_TYPE_NOTE\020\330\263\001\022!\n\033ITEM_SUB_TYPE_U"
  "NLOCK_WORKER\020\301\273\001\022$\n\036ITEM_SUB_TYPE_UPGRAD"
  "E_BUILDING\020\250\303\001\022$\n\036ITEM_SUB_TYPE_SHELTER_"
  "UNLOCK_1\020\221\313\001\022$\n\036ITEM_SUB_TYPE_SHELTER_UN"
  "LOCK_2\020\222\313\001\022 \n\032ITEM_SUB_TYPE_NPC_DISPATCH"
  "\020\311\342\001\022!\n\033ITEM_SUB_TYPE_ALLIANCE_GIFT\020\261\352\001\022"
  "\036\n\030ITEM_SUB_TYPE_HEROE_CHIP\020\271\352\001\022%\n\037ITEM_"
  "SUB_TYPE_COMMON_HEROE_CHIP\020\273\352\001\022\036\n\030ITEM_S"
  "UB_TYPE_HERO_EQUIP\020\231\362\001\022\035\n\027ITEM_SUB_TYPE_"
  "HERO_AUTO\020\312\270\002\022\035\n\027ITEM_SUB_TYPE_KNOWLEDGE"
  "\020\330\206\003\022\035\n\027ITEM_SUB_TYPE_SKILLBOOK\020\331\206\003\022 \n\032I"
  "TEM_SUB_TYPE_TALENT_RESET\020\332\206\003\022 \n\032ITEM_SU"
  "B_TYPE_ALLIANCE_BOX\020\347\324\003\022\"\n\034ITEM_SUB_TREA"
  "SURE_BOX_NORMAL\020\350\324\003\022\'\n!ITEM_SUB_TREASURE"
  "_BOX_USER_CHOOSE\020\351\324\003\022\"\n\034ITEM_SUB_TREASUR"
  "E_BOX_RANDOM\020\352\324\003\022\033\n\025ITEM_SUB_TYPE_STAMIN"
  "A\020\361\242\004\022\037\n\031ITEM_SUB_CITY_MOVE_SENIOR\020\201\361\004\022\037"
  "\n\031ITEM_SUB_CITY_MOVE_RANDOM\020\202\361\004\022!\n\033ITEM_"
  "SUB_CITY_MOVE_ALLIANCE\020\203\361\004\022!\n\033ITEM_SUB_C"
  "ITY_MOVE_NEW_HAND\020\204\361\004\022(\n\"ITEM_SUB_CITY_M"
  "OVE_ALLIANCE_ROOKIE\020\205\361\004\022(\n\"ITEM_SUB_CITY"
  "_MOVE_ALLIANCE_LEADER\020\206\361\004\022\033\n\025ITEM_SUB_TY"
  "PE_RECRUIT\020\221\277\005\022 \n\032ITEM_SUB_TYPE_SOLDIER_"
  "ITEM\020\241\215\006\022$\n\036ITEM_SUB_TYPE_RECRUIT_CREDIT"
  "_1\020\261\333\006\022$\n\036ITEM_SUB_TYPE_RECRUIT_CREDIT_2"
  "\020\262\333\006\022\035\n\027ITEM_SUB_TYPE_SHOW_TIPS\020\301\251\007\022\036\n\030I"
  "TEM_SUB_TYPE_DRESS_UP_1\020\321\367\007\022\036\n\030ITEM_SUB_"
  "TYPE_DRESS_UP_2\020\322\367\007\022\037\n\031ITEM_SUB_TYPE_CHA"
  "NGE_NAME\020\341\305\010\022(\n\"ITEM_SUB_TYPE_CHANGE_ALL"
  "IANCE_NAME\020\342\305\010\022\033\n\025ITEM_SUB_TYPE_ADDBUFF\020"
  "\360\223\t\022 \n\032ITEM_SUB_TYPE_CALL_MONSTER\020\201\342\t\022!\n"
  "\033ITEM_SUB_TYPE_ALLIANCE_FOOD\020\221\260\n\022!\n\033ITEM"
  "_SUB_TYPE_ALLIANCE_WOOD\020\222\260\n\022!\n\033ITEM_SUB_"
  "TYPE_ALLIANCE_IRON\020\223\260\n\022 \n\032ITEM_SUB_TYPE_"
  "ALLIANCE_OIL\020\224\260\n\022\037\n\031ITEM_SUB_TYPE_CITY_G"
  "ROWUP\020\240\376\n\022\"\n\034ITEM_SUB_TYPE_EQUIP_MATERIA"
  "L\020\260\314\013\022\035\n\027ITEM_SUB_TYPE_CAR_UPGRA\020\300\232\014\022\034\n\026"
  "ITEM_SUB_TYPE_CAR_STAR\020\320\350\014\022\036\n\030ITEM_SUB_T"
  "YPE_VIPPOINT_0\020\340\266\r\022\036\n\030ITEM_SUB_TYPE_RED_"
  "PACKET\020\261\275\020\022!\n\033ITEM_SUB_TYPE_AUTO_OPEN_BO"
  "X\020\201\304\023\022%\n\037ITEM_SUB_TYPE_BATTLE_PASS_SCORE"
  "\020\221\222\024\022$\n\036ITEM_SUB_TYPE_GETDUNGEONREWARD\020\261"
  "\256\025\022\030\n\022ITEM_SUB_TYPE_SKIN\020\341\230\027\022\032\n\024ITEM_SUB"
  "_TYPE_LEGEND\020\241\321\031\022\037\n\031ITEM_SUB_TYPE_LEGEND"
  "_CHIP\020\261\237\032\022\037\n\031ITEM_SUB_TYPE_APC_LEVELUP\020\341"
  "\211\034\022$\n\036ITEM_SUB_TYPE_APC_PART_LEVELUP\020\342\211\034"
  "\022%\n\037ITEM_SUB_TYPE_APC_PART_LEVELUP2\020\343\211\034\022"
  "\034\n\026ITEM_SUB_TYPE_RESIDENT\020\241\302\036\022!\n\033ITEM_SU"
  "B_TYPE_RESIDENT_CHIP\020\261\220\037\022\036\n\030ITEM_SUB_TYP"
  "E_DECORATION\020\321\254 \022/\n)ITEM_SUB_TYPE_DECORA"
  "TION_GENERAL_FRAGMENT\020\322\254 \0220\n*ITEM_SUB_TY"
  "PE_DECORATION_SPECIFIC_FRAGMENT\020\323\254 *\302\033\n\020"
  "RewardSourceType\022\033\n\027REWARD_SOURCE_TYPE_N"
  "ONE\020\000\022$\n REWARD_SOURCE_TYPE_FIGHT_PLUNDE"
  "R\020\001\022(\n$REWARD_SOURCE_TYPE_FIGHT_FIRST_BL"
  "OOD\020\002\022#\n\037REWARD_SOURCE_TYPE_FIGHT_NORMAL"
  "\020\003\022%\n!REWARD_SOURCE_TYPE_FIGHT_ASSEMBLE\020"
  "\004\022&\n\"REWARD_SOURCE_TYPE_RESOURCE_GATHER\020"
  "\005\022\036\n\032REWARD_SOURCE_TYPE_RECRUIT\020\006\022 \n\034REW"
  "ARD_SOURCE_TYPE_VIP_LEVEL\020\007\022!\n\035REWARD_SO"
  "URCE_TYPE_LIMIT_SHOP\020\010\022 \n\034REWARD_SOURCE_"
  "TYPE_ITEM_SHOP\020\t\022%\n!REWARD_SOURCE_TYPE_C"
  "OMMANDER_BUFF\020\n\022#\n\037REWARD_SOURCE_TYPE_CA"
  "MPAIGN_GET\020\013\022#\n\037REWARD_SOURCE_TYPE_RESOU"
  "RCE_BUY\020\014\022\'\n#REWARD_SOURCE_TYPE_BUILDING"
  "_UPGRADE\020\r\022$\n REWARD_SOURCE_TYPE_TRAIN_S"
  "OLDIER\020\016\022&\n\"REWARD_SOURCE_TYPE_PROMOTE_S"
  "OLDIER\020\017\022!\n\035REWARD_SOURCE_TYPE_STUDY_TEC"
  "H\020\020\022#\n\037REWARD_SOURCE_TYPE_SHOP_REFRESH\020\021"
  "\022\"\n\036REWARD_SOURCE_TYPE_BUY_STAMINA\020\022\022\037\n\033"
  "REWARD_SOURCE_TYPE_SHOP_BUY\020\023\0220\n,REWARD_"
  "SOURCE_TYPE_ALLIANCE_MOBILIZATION_BUY\020\024\022"
  "\"\n\036REWARD_SOURCE_TYPE_CHANGE_NAME\020\025\022\033\n\027R"
  "EWARD_SOURCE_TYPE_FIRE\020\026\022%\n!REWARD_SOURC"
  "E_TYPE_GOLD_BANK_SAVE\020\027\022&\n\"REWARD_SOURCE"
  "_TYPE_ALLIANCE_DONATE\020\030\022(\n$REWARD_SOURCE"
  "_TYPE_ALLIANCE_FREE_BOX\020\031\022\'\n#REWARD_SOUR"
  "CE_TYPE_ALLIANCE_PAY_BOX\020\032\022)\n%REWARD_SOU"
  "RCE_TYPE_ALLIANCE_HONOR_BOX\020\033\022)\n%REWARD_"
  "SOURCE_TYPE_ACTIVITY_COST_GOLD\020\034\022$\n REWA"
  "RD_SOURCE_TYPE_ALLIANCE_BOSS\020\035\022&\n\"REWARD"
  "_SOURCE_TYPE_CAMPAIGN_HANGUP\020\036\022\037\n\033REWARD"
  "_SOURCE_TYPE_ROULETTE\020\037\022&\n\"REWARD_SOURCE"
  "_TYPE_SPEEDUP_BY_GOLD\020 \022(\n$REWARD_SOURCE"
  "_TYPE_SPEEDUP_USE_ITEMS\020!\022\'\n#REWARD_SOUR"
  "CE_TYPE_SPEEDUP_BUY_ITEM\020\"\022)\n%REWARD_SOU"
  "RCE_TYPE_DUNGEON_FIRST_PASS\020#\022+\n\'REWARD_"
  "SOURCE_TYPE_EXPLORE_EVENT_REWARD\020$\022\"\n\036RE"
  "WARD_SOURCE_TYPE_CAR_UPGRADE\020%\022\037\n\033REWARD"
  "_SOURCE_TYPE_CAR_STAR\020&\022\"\n\036REWARD_SOURCE"
  "_TYPE_NPC_LEVELUP\020\'\022$\n REWARD_SOURCE_TYP"
  "E_VIP_FREE_PACK\020(\022(\n$REWARD_SOURCE_TYPE_"
  "ASSEMBLE_ACTIVITY\020)\022#\n\037REWARD_SOURCE_TYP"
  "E_CURE_SOLDIER\020*\022(\n$REWARD_SOURCE_TYPE_R"
  "ESOURCE_FACTORYS\020+\022#\n\037REWARD_SOURCE_TYPE"
  "_CHAPTER_TASK\020,\022 \n\034REWARD_SOURCE_TYPE_MA"
  "IN_TASK\020-\022\"\n\036REWARD_SOURCE_TYPE_BRANCH_T"
  "ASK\020.\022#\n\037REWARD_SOURCE_TYPE_MAP_INCIDENT"
  "\020/\022\"\n\036REWARD_SOURCE_TYPE_MAIL_REWARD\0200\022!"
  "\n\035REWARD_SOURCE_TYPE_CHARGE_PAY\0204\022\037\n\033REW"
  "ARD_SOURCE_TYPE_HERO_EXP\0205\022\"\n\036REWARD_SOU"
  "RCE_TYPE_HERO_STARUP\0206\022$\n REWARD_SOURCE_"
  "TYPE_EQUIP_UPGRADE\0207\022!\n\035REWARD_SOURCE_TY"
  "PE_EQUIP_RISE\0208\022$\n REWARD_SOURCE_TYPE_EQ"
  "UIP_RECYCLE\0209\022!\n\035REWARD_SOURCE_TYPE_HERO"
  "_STORY\020:\022$\n REWARD_SOURCE_TYPE_GOLD_BANK"
  "_GET\020;\022 \n\034REWARD_SOURCE_TYPE_CITY_MOVE\020<"
  "\022&\n\"REWARD_SOURCE_TYPE_CREATE_ALLIANCE\020="
  "\022\035\n\031REWARD_SOURCE_BATTLE_PASS\020>\022\034\n\030REWAR"
  "D_SOURCE_REPEAT_PAY\020\?\022#\n\037REWARD_SOURCE_R"
  "OULETTE_ACTIVITY\020@\022(\n$REWARD_SOURCE_WEEK"
  "LY_PAY_EVENTS_SHOP\020A\022&\n\"REWARD_SOURCE_AC"
  "TIVITY_FREE_REWARD\020B\022&\n\"REWARD_SOURCE_BT"
  "R_ACTIVITY_DUNGEON\020C\022#\n\037REWARD_SOURCE_BT"
  "R_ACTIVITY_TASK\020D\022\'\n#REWARD_SOURCE_BTR_A"
  "CTIVITY_ROULETTE\020E\022$\n REWARD_SOURCE_BTR_"
  "ACTIVITY_CLEAR\020F\022\'\n#REWARD_SOURCE_BTR_AC"
  "TIVITY_EXCHANGE\020G\022\'\n#REWARD_SOURCE_ACTIV"
  "ITY_NEWSUBSCRIBE\020H\022#\n\037REWARD_SOURCE_BUIL"
  "DING_FACILITY\020I\022$\n REWARD_SOURCE_TYPE_AF"
  "FAIR_REWARD\020J\022\035\n\031REWARD_SOURCE_TYPE_DECR"
  "EE\020K\022%\n!REWARD_SOURCE_TYPE_AFFAIR_SECTIO"
  "N\020L\022\037\n\033REWARD_SOURCE_FREE_PURCHASE\020M\022\"\n\036"
  "REWARD_SOURCE_CREATE_FURNITURE\020N\022#\n\037REWA"
  "RD_SOURCE_UPGRADE_FURNITURE\020O\022\037\n\033REWARD_"
  "SOURCE_METEOR_REWARD\020P\022#\n\037REWARD_SOURCE_"
  "SMALL_GAME_ATTACK\020Q\022\034\n\030REWARD_SOURCE_DAI"
  "LY_TASK\020R\022\037\n\033REWARD_SOURCE_HERO_DISPATCH"
  "\020S\022$\n REWARD_SOURCE_HERO_DISPATCH_HELP\020T"
  "\022#\n\037REWARD_SOURCE_HERO_DISPATCH_ROB\020U\022\035\n"
  "\031REWARD_SOURCE_APC_LEVELUP\020V\022\"\n\036REWARD_S"
  "OURCE_APC_PART_LEVELUP\020W\022$\n REWARD_SOURC"
  "E_TYPE_CHANGE_GENDER\020X\022\"\n\036REWARD_SOURCE_"
  "TYPE_HERO_MANUAL\020Y\022\037\n\033REWARD_SOURCE_TYPE"
  "_VIP_TIME\020Z\022)\n%REWARD_SOURCE_TYPE_SKILLB"
  "OOK_EXCHANGE\020[\022/\n+REWARD_SOURCE_TYPE_ACT"
  "IVITY_SHARANNA_PUZZLE\020\\\022-\n)REWARD_SOURCE"
  "_TYPE_ACTIVITY_SHARANNA_FLOP\020]\022*\n&REWARD"
  "_SOURCE_TYPE_ACTIVITY_CUSTOM_BAG\020^\022,\n(RE"
  "WARD_SOURCE_TYPE_RESIDENT_UPGRADE_STAR\020_"
  "*\261\005\n\rRewardNtfType\022\036\n\021REWARD_NTF_IGNORE\020"
  "\377\377\377\377\377\377\377\377\377\001\022\026\n\022REWARD_NTF_DEFAULT\020\000\022\031\n\025RE"
  "WARD_NTF_DAILY_TASK\020\001\022\030\n\024REWARD_NTF_MAIN"
  "_TASK\020\002\022\032\n\026REWARD_NTF_BRANCH_TASK\020\003\022\027\n\023R"
  "EWARD_NTF_CAMPAIGN\020\004\022\023\n\017REWARD_NTF_MAIL\020"
  "\005\022\027\n\023REWARD_NTF_USE_ITEM\020\006\022\033\n\027REWARD_NTF"
  "_CHAPTER_TASK\020\007\022\024\n\020REWARD_NTF_NOTES\020\010\022\031\n"
  "\025REWARD_NTF_GAME_EVENT\020\t\022\036\n\032REWARD_NTF_S"
  "HELTER_CHAPTER\020\n\022\025\n\021REWARD_NTF_REVERT\020\013\022"
  "\022\n\016REWARD_NTF_TIP\020\014\022\023\n\017REWARD_NTF_COST\020\r"
  "\022\030\n\024REWARD_NTF_NOTE_TASK\020\016\022\027\n\023REWARD_NTF"
  "_RESOURCE\020\017\022\036\n\032REWARD_NTF_EXPLORE_LEVELU"
  "P\020\020\022\025\n\021REWARD_NTF_DECREE\020\021\022\030\n\024REWARD_NTF"
  "_AREA_GRID\020\022\022\035\n\031REWARD_NTF_RECYCLE_DEVIC"
  "E\020\023\022\032\n\026REWARD_NTF_LIMIT_MATCH\020\024\022\034\n\030REWAR"
  "D_NTF_MONSTER_AWARD\020\025\022\035\n\031REWARD_NTF_SPEE"
  "DUP_RETURN\020\026\022&\n\"REWARD_NTF_EXPLORE_COMPL"
  "ETE_REWARD\020\027*\336\003\n\014LanguageType\022\026\n\022LANGUAG"
  "E_TYPE_NONE\020\000\022\030\n\021LANGUAGE_TYPE_ENG\020\201\252\352U\022"
  "\"\n\033LANGUAGE_TYPE_originalwords\020\202\252\352U\022\030\n\021L"
  "ANGUAGE_TYPE_CHT\020\203\252\352U\022\027\n\020LANGUAGE_TYPE_F"
  "R\020\204\252\352U\022\027\n\020LANGUAGE_TYPE_DE\020\205\252\352U\022\027\n\020LANGU"
  "AGE_TYPE_JP\020\206\252\352U\022\027\n\020LANGUAGE_TYPE_IT\020\207\252\352"
  "U\022\027\n\020LANGUAGE_TYPE_PL\020\210\252\352U\022\027\n\020LANGUAGE_T"
  "YPE_RU\020\211\252\352U\022\027\n\020LANGUAGE_TYPE_TH\020\212\252\352U\022\027\n\020"
  "LANGUAGE_TYPE_ES\020\213\252\352U\022\030\n\021LANGUAGE_TYPE_I"
  "ND\020\214\252\352U\022\027\n\020LANGUAGE_TYPE_PT\020\215\252\352U\022\027\n\020LANG"
  "UAGE_TYPE_TR\020\216\252\352U\022\027\n\020LANGUAGE_TYPE_VN\020\217\252"
  "\352U\022\027\n\020LANGUAGE_TYPE_KR\020\220\252\352U\022\030\n\021LANGUAGE_"
  "TYPE_ARB\020\221\252\352U*\036\n\010PackCase\022\022\n\rUSE_LIMIT_M"
  "AX\020\220N*<\n\013RecruitType\022\027\n\023RECRUIT_TYPE_SIN"
  "GLE\020\001\022\024\n\020RECRUIT_TYPE_LOT\020\002*=\n\nBannerTyp"
  "e\022\027\n\023BANNER_TYPE_PRIMARY\020\001\022\026\n\022BANNER_TYP"
  "E_SENIOR\020\002*6\n\010ShopType\022\022\n\016SHOP_TYPE_NONE"
  "\020\000\022\026\n\022SHOP_TYPE_ALLIANCE\020\001*\205\001\n\017ShopRefre"
  "shType\022\032\n\026SHOP_REFRESH_TYPE_NONE\020\000\022\034\n\030SH"
  "OP_REFRESH_TYPE_WEEKLY\020\001\022\033\n\027SHOP_REFRESH"
  "_TYPE_DAILY\020\002\022\033\n\027SHOP_REFRESH_TYPE_Hours"
  "\020\003*\244\001\n\017RecruitFreeType\022\025\n\021RECRUIT_FREE_N"
  "ONE\020\000\022\037\n\033RECRUIT_FREE_GENERAL_SINGLE\020\001\022\034"
  "\n\030RECRUIT_FREE_GENERAL_LOT\020\002\022\036\n\032RECRUIT_"
  "FREE_SENIOR_SINGLE\020\003\022\033\n\027RECRUIT_FREE_SEN"
  "IOR_LOT\020\004*\237\003\n\013MonsterType\022\025\n\021MONSTER_TYP"
  "E_NONE\020\000\022\027\n\023MONSTER_TYPE_NORMAL\020\001\022\031\n\025MON"
  "STER_TYPE_ASSEMBLE\020\002\022!\n\035MONSTER_TYPE_NPC"
  "_TOWN_GUARDER\020\003\022 \n\034MONSTER_TYPE_EXPLORE_"
  "MONSTER\020\004\022!\n\035MONSTER_TYPE_DOOMSDAY_MONST"
  "ER\020e\022\036\n\032MONSTER_TYPE_DOOMSDAY_BOSS\020f\022\"\n\036"
  "MONSTER_TYPE_ASSEMBLE_ACTIVITY\020g\022)\n%MONS"
  "TER_TYPE_WP_CALL_MONSTER_ACTIVITY\020h\022\031\n\025M"
  "ONSTER_TYPE_ALLIANCE\020i\022\032\n\026MONSTER_TYPE_B"
  "R_NORMAL\020j\022\032\n\026MONSTER_TYPE_BR_SENIOR\020k\022\033"
  "\n\027MONSTER_TYPE_WORLD_BOSS\020l*s\n\021ResourceP"
  "ointType\022\034\n\030RESOURCE_POINT_TYPE_NONE\020\000\022\036"
  "\n\032RESOURCE_POINT_TYPE_NORMAL\020\001\022 \n\034RESOUR"
  "CE_POINT_TYPE_INCIDENT\020\002*x\n\010MarkType\022\022\n\016"
  "MARK_TYPE_NONE\020\000\022\025\n\021MARK_TYPE_SPECIAL\020\001\022"
  "\024\n\020MARK_TYPE_FRIEND\020\002\022\023\n\017MARK_TYPE_ENEMY"
  "\020\003\022\026\n\022MARK_TYPE_ALLIANCE\020\004*V\n\nHeroStatus"
  "\022\024\n\020HERO_STATUS_NONE\020\000\022\030\n\024HERO_STATUS_MA"
  "RCHING\020\001\022\030\n\024HERO_STATUS_GARRISON\020\002*\220\001\n\rH"
  "eroSkillType\022\030\n\024HERO_SKILL_TYPE_NONE\020\000\022\027"
  "\n\023HERO_SKILL_TYPE_ONE\020\001\022\027\n\023HERO_SKILL_TY"
  "PE_TWO\020\002\022\031\n\025HERO_SKILL_TYPE_THREE\020\003\022\030\n\024H"
  "ERO_SKILL_TYPE_FOUR\020\004*\255\001\n\rLoginModeType\022"
  "\025\n\021LOGIN_MODULE_SELF\020\000\022\033\n\027LOGIN_MODULE_S"
  "DK_PAPPUS\020\001\022\030\n\024LOGIN_MODULE_IGG_SDK\020\002\022\031\n"
  "\025LOGIN_MODULE_FACEBOOK\020\006\022\036\n\032LOGIN_MODULE"
  "_LOCAL_ACCOUNT\020\014\022\023\n\017LOGIN_MODULE_MI\020\r*\313\003"
  "\n\020KICK_PLAYER_TYPE\022%\n\030KICK_PLAYER_TYPE_D"
  "EFAULT\020\377\377\377\377\377\377\377\377\377\001\022#\n\037KICK_PLAYER_TYPE_ON"
  "LINE_ALREADY\020\000\022(\n$KICK_PLAYER_TYPE_DISCO"
  "NNECT_LONGTIME\020\001\022\'\n#KICK_PLAYER_TYPE_CLI"
  "ENT_REQ_OFFLINE\020\002\022#\n\037KICK_PLAYER_TYPE_HE"
  "ALTH_INVALID\020\003\022\036\n\032KICK_PLAYER_TYPE_BGIP_"
  "PROC\020\004\022 \n\034KICK_PLAYER_TYPE_SHUT_SERVER\020\005"
  "\022+\n\'KICK_PLAYER_TYPE_ZK_OFF_LINE_ALL_PLA"
  "YER\020\006\022!\n\035KICK_PLAYER_TYPE_SERVER_ERROR\020\007"
  "\022\027\n\023KICK_PLAYER_TYPE_GM\020\010\022#\n\037KICK_PLAYER"
  "_TYPE_GATETOKENERROR\020\t\022#\n\037KICK_PLAYER_TY"
  "PE_GATE_RECONNECT\020\n*>\n\014PlatformType\022\030\n\024P"
  "LATFORMTYPE_ANDRIOD\020\000\022\024\n\020PLATFORMTYPE_IO"
  "S\020\001*H\n\tWorldType\022\025\n\021WORLDTYPE_WEBCHAT\020\001\022"
  "\020\n\014WORLDTYPE_QQ\020\002\022\022\n\016WORLDTYPE_TEST\020\003*G\n"
  "\021PlatformWorldType\022\032\n\026PLATFORM_WORLD_AND"
  "ROID\020\000\022\026\n\022PLATFORM_WORLD_IOS\020\001*3\n\nCrossS"
  "tate\022\022\n\016CROSSSTATE_OUT\020\000\022\021\n\rCROSSSTATE_I"
  "N\020\001*\273\001\n\013BigAreaType\022\033\n\016BIGAREAID_NONE\020\377\377"
  "\377\377\377\377\377\377\377\001\022\021\n\rBIGAREAID_All\020\000\022\031\n\025BIGAREAID"
  "_WEBCHAT_IOS\020\001\022\035\n\031BIGAREAID_WEBCHAT_ANDR"
  "OID\020\002\022\024\n\020BIGAREAID_QQ_IOS\020\003\022\030\n\024BIGAREAID"
  "_QQ_ANDROID\020\004\022\022\n\016BIGAREAID_TEST\020c*\324\005\n!BG"
  "IP_CMD_ERRORItemType_OfflineExp\022\037\n\022CMD_E"
  "RROR_LOADCHAR\020\360\377\377\377\377\377\377\377\377\001\022\037\n\022CMD_ERROR_SA"
  "VECHAR\020\361\377\377\377\377\377\377\377\377\001\022\037\n\022CMD_ERROR_DECODING\020"
  "\362\377\377\377\377\377\377\377\377\001\022\034\n\017CMD_ERROR_NOYBP\020\363\377\377\377\377\377\377\377\377\001"
  "\022\033\n\016CMD_ERROR_BGIP\020\364\377\377\377\377\377\377\377\377\001\022$\n\027CMD_ERR"
  "OR_CONFIGURATION\020\365\377\377\377\377\377\377\377\377\001\022%\n\030CMD_ERROR"
  "_SERVICE_UNKOWN\020\366\377\377\377\377\377\377\377\377\001\022\"\n\025CMD_ERROR_"
  "SYSTEM_BUSY\020\367\377\377\377\377\377\377\377\377\001\022\035\n\020CMD_ERROR_SYST"
  "EM\020\370\377\377\377\377\377\377\377\377\001\022!\n\024CMD_ERROR_NONEOBJECT\020\371\377"
  "\377\377\377\377\377\377\377\001\022\034\n\017CMD_ERROR_OTHER\020\372\377\377\377\377\377\377\377\377\001\022\033"
  "\n\016CMD_ERROR_BUSY\020\373\377\377\377\377\377\377\377\377\001\022\032\n\rCMD_ERROR"
  "_API\020\374\377\377\377\377\377\377\377\377\001\022\031\n\014CMD_ERROR_DB\020\375\377\377\377\377\377\377\377"
  "\377\001\022\036\n\021CMD_ERROR_TIMEOUT\020\376\377\377\377\377\377\377\377\377\001\022\032\n\rCM"
  "D_ERROR_NET\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013CMD_SUCCESS\020\000\022"
  "\026\n\022CMD_SUCCESS_NOBODY\020\001\022\023\n\017CMD_OPENIDWRO"
  "NG\020\002\022\024\n\020CMD_ORDER_REPEAT\020\003\022\024\n\020CMD_NUMBER"
  "_ERROR\020\004\022\025\n\021CMD_COMMON_REPEAT\020\005\022\030\n\024CMD_O"
  "BJECT_NOT_EXIST\020\006\022\025\n\021CMD_REPEATED_DEAL\020\007"
  "*M\n\nGenderType\022\023\n\017GenderType_None\020\000\022\023\n\017G"
  "enderType_Male\020\001\022\025\n\021GenderType_Female\020\002*"
  "Z\n\014EServerState\022\r\n\tEST_CRASH\020\000\022\016\n\nEST_NO"
  "RMAL\020\001\022\014\n\010EST_BUSY\020\002\022\014\n\010EST_FIRE\020\003\022\017\n\013ES"
  "T_MAINTEN\020\004*=\n\016EImigrantState\022\r\n\tETS_Clo"
  "se\020\000\022\014\n\010ETS_Open\020\001\022\016\n\nETS_NORMAL\020\003*Q\n\tPo"
  "werMode\022\r\n\tPM_UNKNOW\020\000\022\r\n\tPM_WEIXIN\020\001\022\023\n"
  "\017PM_SQGAMECENTER\020\002\022\021\n\rPM_IOSVISITOR\020\003*T\n"
  "\020ESdkTimeProcType\022 \n\034ESdkTimeProcTypeOnl"
  "ieTimeSet\020\001\022\036\n\032ESdkTimeProcTypeTryTimeSe"
  "t\020\002*\377U\n\006MsgTip\022\020\n\014EGEC_SUCCESS\020\000\022\025\n\021EGEC"
  "_UNKOWN_ERROR\020\001\022\r\n\tEGEC_NONE\020\002\022\030\n\024EGEC_P"
  "ARSE_MSG_ERROR\020\003\022\027\n\023EGEC_NO_MSG_HANDLER\020"
  "\004\022!\n\035EGEC_MSG_ROUTER_REQUEST_ERROR\020\005\022\037\n\033"
  "EGEC_MSG_ROUTER_REPLY_ERROR\020\006\022\030\n\024EGEC_PL"
  "AYER_NOT_FIND\020\007\022\027\n\023EGEC_PLAYER_IS_NULL\020\010"
  "\022\030\n\024EGEC_RECORD_NOT_FIND\020\t\022\027\n\023EGEC_RECOR"
  "D_IS_NULL\020\n\022\025\n\021EGEC_SERVER_ERROR\020\013\022\031\n\025EG"
  "EC_SIGNATURE_SUCCES\020\025\022\033\n\027EGEC_ACCOUNTPWD"
  "_INVALID\020\026\022\030\n\024EGEC_ACCOUNT_INVALID\020\027\022\026\n\022"
  "EGEC_ACCOUNT_USING\020\030\022\027\n\023EGEC_ACCOUNT_LOC"
  "KED\020\031\022\030\n\024EGEC_CHARACTER_EXIST\020\032\022\032\n\026EGEC_"
  "CHARACTER_SUCCESS\020\033\022\030\n\024EGEC_CHARACTER_FA"
  "ILD\020\034\022\033\n\027EGEC_DELETECHAR_SUCCESS\020\035\022\031\n\025EG"
  "EC_DELETECHAR_FAILD\020\036\022\031\n\025EGEC_CHARACTER_"
  "NUMOUT\020\037\022\032\n\026EGEC_CHARACTER_INVALID\020 \022\033\n\027"
  "EGEC_CHARACTER_NOTEXIST\020!\022\030\n\024EGEC_CHARAC"
  "TER_USING\020\"\022\031\n\025EGEC_CHARACTER_LOCKED\020#\022\036"
  "\n\032EGEC_REACH_REGISTER_LIMITS\020$\022\035\n\031EGEC_C"
  "REATE_CHAR_TOO_MANY\020%\022\"\n\036EGEC_CREATE_CHA"
  "R_NAME_TOO_LONG\020&\022\032\n\026EGEC_CREATE_CHAR_LI"
  "MIT\020\'\022\037\n\033EGEC_CREATE_CHAR_NAME_VALID\020(\022#"
  "\n\037EGEC_CREATE_CHAR_NAME_TOO_SHORT\020)\022\032\n\026E"
  "GEC_SVRZONEID_INVALID\020*\022\035\n\031EGEC_THIS_ARE"
  "A_IS_CLOSING\020+\022#\n\037EGEC_FORBIDDEN_LOG_HEA"
  "LTH_VALID\020,\022\032\n\026EGEC_ENTERGAME_SUCCESS\0203\022"
  "\030\n\024EGEC_ENTERGAME_FAILD\0204\022\023\n\017EGEC_NO_GAT"
  "EWAY\020G\022\026\n\022EGEC_MachineForbid\020H\022\031\n\025EGEC_A"
  "CCOUNT_NOTALLOW\020Q\022\034\n\030EGEC_ACCOUNT_BGIP_N"
  "OPLAY\020R\022\032\n\026EGEC_VERSION_NOT_MATCH\020e\022\027\n\023E"
  "GEC_NO_LOGINSERVER\020f\022\027\n\023EGEC_SERVER_MAIN"
  "TEN\020g\022\031\n\025EGEC_SERVER_NO_REVIEW\020h\022\037\n\033EGEC"
  "_VERSION_IS_GRAYVERSION\020i\022!\n\035EGEC_VERSIO"
  "N_CANT_GRAYVERSION\020j\022\027\n\023EGEC_SERVER_INVA"
  "LID\020k\022\026\n\022EGEC_LOGIN_DEQUEUE\020l\022\027\n\023EGEC_LO"
  "GIN_IN_QUEUE\020m\022\024\n\020EGEC_BAN_KICKOUT\020n\022\025\n\021"
  "EGEC_NEED_RELOGIN\020o\022\036\n\032EGEC_GAMESERVER_D"
  "ISCONNECT\020p\022\034\n\030EGEC_ENTER_SCENE_SUCCESS\020"
  "q\022\031\n\025EGEC_ENTER_SCENE_FAIL\020r\022\036\n\032EGEC_SHO"
  "W_TEXT_AND_DO_NEXT\020s\022\'\n#EGEC_LOGIN_NOFUN"
  "D_CLIENT_CACHE_INFO\020t\022\037\n\033EGEC_LOGIN_SERV"
  "ERID_INVALID\020u\022\'\n#EGEC_LOGIN_NO_SAME_REC"
  "ONNECT_ROLEID\020v\022\027\n\023EGEC_LOGIN_ROLE_BAN\020w"
  "\022\033\n\027EGEC_CLENT_SEND_MSG_ERR\020x\022\036\n\032EGEC_GA"
  "TE_TOKEN_ERROR_KICK\020y\022\'\n#EGEC_GATE_CONFI"
  "GCLIENTID_ERROR_KICK\020z\022!\n\034EGEC_TX_COMSUM"
  "E_MONEY_FAILED\020\365\003\022\'\n\"EGEC_HASHSLOT_FOLLO"
  "WER_ALREADY_ADD\020\214\025\0222\n-EGEC_HASHSLOT_CANN"
  "OT_UPDATE_WITH_CRASHED_NODE\020\215\025\022#\n\036EGEC_H"
  "ASHSLOT_HAVE_NO_FOLLOWER\020\216\025\022$\n\037EGEC_HASH"
  "SLOT_FOLLOWER_NOT_FIND\020\217\025\0220\n+EGEC_HASHSL"
  "OT_NOT_FIND_SELF_IN_FOLLOWER_MAP\020\220\025\022/\n*E"
  "GEC_HASHSLOT_TOTAL_SLOT_CNT_CANNOT_CHANG"
  "E\020\221\025\022-\n(EGEC_HASHSLOT_NOT_FIND_GUID_IN_S"
  "LOT_LIST\020\222\025\0220\n+EGEC_HASHSLOT_GUID_CANNOT"
  "_ADD_THIS_FOLLOWER\020\223\025\0224\n/EGEC_HASHSLOT_O"
  "BSERVER_VER_BIGGER_THAN_FOLLOWER\020\224\025\022/\n*E"
  "GEC_HASHSLOT_TOTAL_HASHSLOT_INFO_NOT_FIN"
  "D\020\225\025\0222\n-EGEC_HASHSLOT_TOTAL_HASHSLOT_INF"
  "O_OUT_OF_DATE\020\226\025\022\'\n\"EGEC_CITY_BUILDING_L"
  "EVELUP_SUCCESS\020\211\'\022$\n\037EGEC_TACTICAL_BUILD"
  "ING_IN_FIGHT\020\212\'\0220\n+EGEC_TACTICAL_BUILDIN"
  "G_RESOURSE_NOT_ENOUGHT\020\213\'\022,\n\'EGEC_TACTIC"
  "AL_BUILDING_ITEM_NOT_ENOUGHT\020\214\'\022\024\n\017EGEC_"
  "DATA_ERROR\020\221N\022\030\n\023EGEC_FUNC_IS_LOCKED\020\222N\022"
  "\035\n\030EGEC_LEVEL_NOT_SATISFIED\020\223N\022\025\n\020EGEC_A"
  "WARD_DRAWN\020\224N\022!\n\034EGEC_SERVER_LEVEL_NOT_E"
  "NOUGH\020\225N\022\033\n\026EGEC_ACTIVITY_DISABLED\020\226N\022\034\n"
  "\027EGEC_ACTIVITY_NOT_START\020\227N\022\032\n\025EGEC_ACTI"
  "VITY_EXPIRED\020\230N\022\037\n\032EGEC_VERSION_CANT_USE"
  "_ITEM\020\231N\022\034\n\027EGEC_NOT_MEET_CONDITION\020\232N\022!"
  "\n\034EGEC_SHORT_TIME_TOO_MUCH_MSG\020\233N\022\034\n\027EGE"
  "C_GAIN_REWARD_FAILED\020\234N\022\032\n\025EGEC_HAVE_BLO"
  "CK_WORDS\020\235N\022\034\n\027EGEC_NOT_ENOUGH_CURENCY\020\236"
  "N\022\017\n\nEGEC_IN_CD\020\237N\022\032\n\025EGEC_UNEXPECTED_VA"
  "LUE\020\240N\022\027\n\022EGEC_TIME_NOT_MEET\020\241N\022\024\n\017EGEC_"
  "BAD_PARAMS\020\242N\022\031\n\024EGEC_NOT_ENOUGH_ITEM\020\243N"
  "\022\036\n\031EGEC_GM_COMMAND_NOT_EXIST\020\244N\022\027\n\022EGEC"
  "_BAD_ITEM_TYPE\020\245N\022&\n!EGEC_USE_BOX_CHOOSE"
  "_INVALID_COUNT\020\246N\022\034\n\027EGEC_ALREADY_GET_RE"
  "WARD\020\247N\022\025\n\020EGEC_NOTE_GAMEID\020\250N\022!\n\034EGEC_A"
  "LLIANCE_LEADER_RECYCLE\020\251N\022&\n!EGEC_NO_SUI"
  "T_POS_FOR_CALL_MONSTER\020\252N\022\026\n\021EGEC_HAS_AL"
  "LIANCE\020\253N\022\032\n\025EGEC_IS_TOWN_OFFICIAL\020\254N\0223\n"
  ".EGEC_IS_EXIST_SOLDIER_IS_CHUZHENG_CAN_N"
  "OT_TEAM\020\255N\022*\n%EGEC_IS_EXIST_CAN_NOT_FAQI"
  "_MUNCH_TEAM\020\256N\022-\n(EGEC_IS_EXIST_SOLDIER_"
  "GROUP_CAN_NOT_AGIN\020\257N\022$\n\037EGEC_IS_EXIST_A"
  "LLIANCE_ATTACKED\020\260N\022(\n#EGEC_IS_TEAM_KILL"
  "_TARGET_GET_REWARD\020\261N\022\031\n\024EGEC_IS_TEAM_IS"
  "_FULL\020\262N\022*\n%EGEC_IS_TEAM_MONSTER_LEVEL_N"
  "OT_UNLOCK\020\263N\022\037\n\032EGEC_ASSEMBLE_SG_BE_KICK"
  "ED\020\264N\022\036\n\031EGEC_ASSEMBLE_SG_MARCHING\020\265N\022,\n"
  "\'EGEC_USE_CALL_MONSTER_ITEM_IN_CROSSAREA"
  "\020\266N\022 \n\033EGEC_BUILDING_ALREADY_EXIST\020\371U\022\033\n"
  "\026EGEC_BAD_BUILDING_TYPE\020\372U\022$\n\037EGEC_CHECK"
  "_PRECONDITIONS_FAILED\020\373U\022\023\n\016EGEC_NO_WORK"
  "ER\020\374U\022\034\n\027EGEC_BUILDING_NOT_EXIST\020\375U\022\034\n\027E"
  "GEC_BUILDING_MAX_LEVEL\020\376U\022\036\n\031EGEC_BUILDI"
  "NG_CANNOT_LVUP\020\377U\022\"\n\035EGEC_BUILDING_ALREA"
  "DY_UPGRADE\020\200V\022\030\n\023EGEC_INVAILD_WORKER\020\201V\022"
  "\024\n\017EGEC_BAD_WORKER\020\202V\022\026\n\021EGEC_BAD_BUILDI"
  "NG\020\203V\022\034\n\027EGEC_BAD_BUILDING_LEVEL\020\204V\022\036\n\031E"
  "GEC_BUILDING_NOT_UPGRADE\020\205V\022\035\n\030EGEC_BAD_"
  "BUILDING_STATUS\020\206V\022\025\n\020EGEC_MAX_WALL_HP\020\207"
  "V\022%\n EGEC_BAD_BUILDING_CLASSIFICATION\020\210V"
  "\022\031\n\024EGEC_BAD_WOUNDED_NUM\020\211V\022\024\n\017EGEC_HAS_"
  "CURING\020\212V\022\027\n\022EGEC_HAS_NO_CURING\020\213V\022\026\n\021EG"
  "EC_HAS_TRAINING\020\214V\022\031\n\024EGEC_HAS_NO_TRAINI"
  "NG\020\215V\022\033\n\026EGEC_BAD_TRAIN_SOLDIER\020\216V\022\027\n\022EG"
  "EC_MAX_TRAIN_NUM\020\217V\022\032\n\025EGEC_BAD_PROMOTE_"
  "DATA\020\220V\022 \n\033EGEC_SHELTER_ALREADY_UNLOCK\020\221"
  "V\022\034\n\027EGEC_SHELTER_NOT_UNLOCK\020\222V\022\036\n\031EGEC_"
  "SHELTER_BAD_PROGRESS\020\223V\022\036\n\031EGEC_SHELTER_"
  "HAS_BUILDING\020\224V\022\026\n\021EGEC_HAS_STUDYING\020\225V\022"
  "\031\n\024EGEC_HAS_NO_STUDYING\020\226V\022\032\n\025EGEC_ALREA"
  "DY_HAS_TECH\020\227V\022\036\n\031EGEC_CHECK_PRETECH_FAI"
  "LED\020\230V\022\034\n\027EGEC_FINISH_TECH_FAILED\020\231V\022\035\n\030"
  "EGEC_FURNITURE_NOT_EXIST\020\232V\022\036\n\031EGEC_FURN"
  "ITURE_NOT_ENOUGH\020\233V\022#\n\036EGEC_BUILDING_LEV"
  "EL_NOT_ENOUGH\020\234V\022!\n\034EGEC_FURNITURE_ALREA"
  "DY_EXIST\020\235V\022\036\n\031EGEC_MAX_SOLDIER_TYPE_NUM"
  "\020\236V\022%\n EGEC_SOLDIER_CAPACITY_NOT_ENOUGH\020"
  "\237V\022(\n#EGEC_MAX_SOLDIER_TYPE_NUM_MAIL_TAK"
  "E\020\240V\0220\n+EGEC_MAX_SOLDIER_TYPE_NUM_MAIL_T"
  "AKE_LIMITED\020\241V\022\035\n\030EGEC_DRESSUP_EMOJI_IN_"
  "CD\020\242V\022\"\n\035EGEC_DRESSUP_EMOJI_NOT_UNLOCK\020\243"
  "V\022\035\n\030EGEC_SHIELD_EXIST_BETTER\020\245V\022\030\n\023EGEC"
  "_SGLIST_OUTSIDE\020\311V\022\030\n\023EGEC_CITY_IN_BATTL"
  "E\020\312V\022\032\n\025EGEC_CITY_MOVE_FAILED\020\313V\022$\n\037EGEC"
  "_SET_DGNVIEW_NOT_IN_DUNGEON\020\314V\022\034\n\027EGEC_A"
  "LREADY_IN_DUNGEON\020\315V\022)\n$EGEC_CITY_MOVE_A"
  "LLIANCE_NO_TERRITORY\020\316V\022!\n\034EGEC_CITY_SOL"
  "DIER_NOT_ENOUGH\020\335V\022\037\n\032EGEC_NOVICE_PROTEC"
  "T_ATTACK\020\336V\022 \n\033EGEC_CACEL_TEAM_FOR_TIMEO"
  "UT\020\337V\022(\n#EGEC_CACEL_TEAM_FOR_TARGET_DISA"
  "PEAR\020\340V\022\035\n\030EGEC_CACEL_TEAM_FOR_LOSE\020\341V\022#"
  "\n\036EGEC_SHARE_TEAM_ATTACK_SUCCESS\020\342V\022\025\n\020E"
  "GEC_BLACK_LIMIT\020\347V\022\026\n\021EGEC_FRIEND_LIMIT\020"
  "\350V\022\025\n\020EGEC_APPLY_LIMIT\020\351V\022\030\n\023EGEC_APPLY_"
  "ME_LIMIT\020\352V\022\034\n\027EGEC_OTHER_FRIEND_LIMIT\020\353"
  "V\022\037\n\032EGEC_ALREADY_FINISHED_TASK\020\361V\022\"\n\035EG"
  "EC_NOT_ENOUGH_TASK_PROGRESS\020\362V\022\037\n\032EGEC_D"
  "UPLICATE_PLAYER_NAME\020\373V\022\036\n\031EGEC_ALREADY_"
  "HAS_DRESS_UP\020\374V\022\025\n\020EGEC_DIRTY_WORLD\020\375V\022\034"
  "\n\027EGEC_RESONATE_SLOT_LOCK\020\374\\\022\034\n\027EGEC_RES"
  "ONATE_SLOT_USED\020\375\\\022\035\n\030EGEC_RESONATE_HERO"
  "_SETED\020\376\\\022\032\n\025EGEC_RESONATE_SLOT_CD\020\377\\\022!\n"
  "\034EGEC_RESONATE_HERO_NOT_EXIST\020\200]\022\036\n\031EGEC"
  "_RESONATE_HERO_LEADER\020\201]\022\037\n\032EGEC_RESONAT"
  "E_SLOT_NO_HERO\020\202]\022 \n\033EGEC_RESONATE_SLOT_"
  "UNLOCKED\020\203]\022\"\n\035EGEC_RESONATE_SLOT_CD_CLE"
  "ARED\020\204]\022#\n\036EGEC_EQUIP_LEVEL_CFG_NOT_FOUN"
  "D\020\206]\022%\n EGEC_EQUIP_RISE_LEVEL_NOT_ENOUGH"
  "\020\207]\022(\n#EGEC_EQUIP_UPGRADE_LEVEL_NOT_ENOU"
  "GH\020\210]\022\030\n\023EGEC_HERO_NOT_EXIST\020\211]\022\036\n\031EGEC_"
  "EQUIP_NOT_MATCH_HERO\020\212]\022\032\n\025EGEC_EQUIP_NO"
  "T_ENOUGH\020\213]\022\036\n\031EGEC_EQUIP_CAN_NOT_RECAST"
  "\020\214]\022\034\n\027EGEC_EQUIP_QUALITY_DIFF\020\215]\022!\n\034EGE"
  "C_EQUIP_QUALITY_NOT_FOUND\020\216]\022\031\n\024EGEC_EQU"
  "IP_NOT_FOUND\020\217]\022%\n EGEC_EQUIP_HERO_STATU"
  "S_NOT_ALLOW\020\220]\022\030\n\023EGEC_EQUIP_BAG_FULL\020\221]"
  "\022\037\n\032EGEC_DISPATCH_INVALID_HERO\020\256]\022\034\n\027EGE"
  "C_DISPATCH_HERO_UESD\020\257]\022!\n\034EGEC_DISPATCH"
  "_HERO_CONDITION\020\260]\022%\n EGEC_DISPATCH_REFR"
  "ESH_NOT_ENOUGH\020\261]\022#\n\036EGEC_DISPATCH_REFRE"
  "SH_NOT_NEED\020\262]\022\035\n\030EGEC_DISPATCH_HELP_LIM"
  "IT\020\263]\022\034\n\027EGEC_DISPATCH_NOT_EXIST\020\264]\022\027\n\022E"
  "GEC_DISPATCH_DONE\020\265]\022\"\n\035EGEC_DISPATCH_RO"
  "B_DAILY_LIMIT\020\266]\022\034\n\027EGEC_DISPATCH_ROB_LI"
  "MIT\020\267]\022\035\n\030EGEC_DISPATCH_ROB_REPEAT\020\270]\022\036\n"
  "\031EGEC_DISPATCH_HELP_REPEAT\020\271]\022\031\n\024EGEC_DI"
  "SPATCH_HELPED\020\272]\022 \n\033EGEC_HERO_STORY_STAR"
  "_UNLOCK\020\340]\022 \n\033EGEC_HERO_STORY_AWARD_DRAW"
  "N\020\341]\022$\n\037EGEC_HERO_UP_SKILL_NEED_HERO_LV\020"
  "\342]\022\'\n\"EGEC_HERO_UP_SKILL_COST_NOT_ENOUGH"
  "\020\343]\022!\n\034EGEC_HERO_UP_SKILL_NOT_FOUND\020\344]\022\031"
  "\n\024EGEC_HERO_NOT_UNLOCK\020\345]\022$\n\037EGEC_HERO_U"
  "P_EQUIP_NEED_HERO_LV\020\346]\022&\n!EGEC_HERO_UP_"
  "STAR_COST_NOT_ENOUGH\020\352]\022!\n\034EGEC_HERO_CUR"
  "_STAR_LEVEL_MAX\020\357]\022#\n\036EGEC_HERO_COST_FRA"
  "GMENT_EXISTS\020\360]\022(\n#EGEC_HERO_COST_FRAGME"
  "NT_NOT_ENOUGHT\020\361]\022\037\n\032EGEC_HERO_UP_TALENT"
  "_UNLOCK\020\364]\022#\n\036EGEC_HERO_UP_TALENT_NOT_EN"
  "OUGH\020\365]\022\"\n\035EGEC_HERO_UP_TALENT_NOT_FOUND"
  "\020\366]\022\037\n\032EGEC_HERO_UP_TALENT_MAX_LV\020\367]\022&\n!"
  "EGEC_HERO_UP_TALENT_HERO_LV_LIMIT\020\370]\022+\n&"
  "EGEC_HERO_RESET_TALENT_COST_NOT_ENOUGH\020\371"
  "]\022.\n)EGEC_ALLIANCE_HAS_UNPROCESSED_APPLI"
  "CATION\020\372]\022#\n\036EGEC_ALLIANCE_NAME_LEN_INVA"
  "LID\020\373]\022\"\n\035EGEC_ALLIANCE_NAME_REPETITION\020"
  "\374]\022\"\n\035EGEC_ALLIANCE_TAG_LEN_INVALID\020\375]\022#"
  "\n\036EGEC_ALLIANCE_SHOP_ITEM_EXPIRE\020\376]\022\'\n\"E"
  "GEC_ALLIANCE_REPLACE_LEADER_ERROR\020\377]\022!\n\034"
  "EGEC_ALLIANCE_SCHEDULE_LIMIT\020\200^\022)\n$EGEC_"
  "ALLIANCE_WELCOME_ROOKIEALLIANCE\020\201^\022,\n\'EG"
  "EC_ALLIANCE_CAN_NOT_JOIN_OTHER_SERVER\020\202^"
  "\022.\n)EGEC_BUILDING_GARRISON_SOLDIERGROUP_"
  "LIMIT\020\203^\022&\n!EGEC_BUILDING_GARRISON_CITY_"
  "LIMIT\020\204^\022)\n$EGEC_BUILDING_GARRISON_SOLDI"
  "ER_LIMIT\020\205^\022!\n\034EGEC_GARRISON_ENEMY_BUILD"
  "ING\020\206^\0223\n.EGEC_ATTACK_ALLIANCE_BUILDING_"
  "WITHOUT_ALLIANCE\020\207^\022+\n&EGEC_ATTACK_ALLIA"
  "NCE_BUILDING_NOT_LINK\020\210^\022\033\n\026EGEC_ALLIANC"
  "E_NOT_FIND\020\211^\022\"\n\035EGEC_ALLIANCE_MOVE_CITY"
  "_ERROR\020\212^\022 \n\033EGEC_GARRISON_LEADER_CHANGE"
  "\020\213^\022\035\n\030EGEC_GARRISON_KICKED_OUT\020\214^\022*\n%EG"
  "EC_QUIT_ALLIANCE_FAILED_BY_NPC_TOWN\020\215^\022\037"
  "\n\032EGEC_ALLIANCE_CAN_NOT_JOIN\020\217^\022\033\n\026EGEC_"
  "ALLIANCE_APPLY_CD\020\220^\022\"\n\035EGEC_ALLIANCE_CA"
  "N_NOT_APPOINT\020\221^\022#\n\036EGEC_BUILDING_IN_SOL"
  "DIER_LIMIT\020\222^\022$\n\037EGEC_MARCHING_ENERGY_NO"
  "T_ENOUGH\020\224^\022\037\n\032EGEC_CHARGE_BAG_TIME_LIMI"
  "T\020\225^\022\'\n\"EGEC_ALLIANCE_ROOKIE_MOVE_NO_PLA"
  "CE\020\226^\022&\n!EGEC_ALLIANCE_PLAYER_ALREADY_QU"
  "IT\020\227^\022+\n&EGEC_ALLIANCE_MOBILIZATION_NO_A"
  "LLIANCE\020\230^\022*\n%EGEC_ALLIANCE_MOBILIZATION"
  "_JOIN_OTHER\020\231^\022,\n\'EGEC_ALLIANCE_MOBILIZA"
  "TION_MEMBER_COUNT\020\232^\022*\n%EGEC_ALLIANCE_MO"
  "BILIZATION_REFRESH_CD\020\233^\022+\n&EGEC_ALLIANC"
  "E_MOBILIZATION_CLAIM_ERROR\020\234^\022\"\n\035EGEC_AL"
  "LIANCE_CAN_NOT_DISBAND\020\235^\022)\n$EGEC_ALLIAN"
  "CE_MOBILIZATION_GOTO_BIND\020\236^\022(\n#EGEC_ALL"
  "IANCE_MOBILIZATION_LV_LIMIT\020\237^\022(\n#EGEC_A"
  "LLIANCE_MOBILIZATION_NO_MATCH\020\240^\022(\n#EGEC"
  "_ALLIANCE_MOBILIZATION_NOT_OPEN\020\241^\022$\n\037EG"
  "EC_ALLIANCE_POSITION_LV_LIMIT\020\242^\022\037\n\032EGEC"
  "_ALLIANCE_MOVE_NIL_POS\020\243^\022!\n\034EGEC_ALLIAN"
  "CE_MOVE_ITEM_LCAK\020\244^\022&\n!EGEC_ALLIANCE_JO"
  "IN_SGLIST_OUTSIDE\020\245^\022%\n EGEC_ALLIANCE_GE"
  "T_REWARD_BOX_TOP\020\246^\022-\n(EGEC_ALLIANCE_OTH"
  "ER_MEMBER_SET_BOSS_INFO\020\247^\022)\n$EGEC_ALLIA"
  "NCE_FAST_JOIN_ALLIANCE_NIL\020\253^\022 \n\033EGEC_AL"
  "LIANCE_LEADER_ONLINE\020\254^\022 \n\033EGEC_ALLIANCE"
  "_LEADER_CHANGE\020\255^\022\"\n\035EGEC_ALLIANCE_CASTL"
  "E_LV_LIMIT\020\256^\022\037\n\032EGEC_ALLIANCE_MEMBER_LI"
  "MIT\020\257^\022\037\n\032EGEC_ALLIANCE_APPLY_REFUSE\020\260^\022"
  "\027\n\022EGEC_VIP_DAILY_EXP\020\305^\022\026\n\021EGEC_VIP_PAY"
  "_PACK\020\306^\022\036\n\031EGEC_VIP_LEVEL_NOT_ENOUGH\020\307^"
  "\022\027\n\022EGEC_VIP_FREE_PACK\020\310^\022\031\n\024EGEC_VIP_BU"
  "Y_VIP_EXP\020\311^\022\033\n\026EGEC_ENERGY_NOT_ENOUGH\020\312"
  "^\022\034\n\027EGEC_DAILY_CHARGE_LIMIT\020\313^\022!\n\034EGEC_"
  "RPG_DUNGEON_CHEAT_ERROR\020\314^\022\023\n\016EGEC_MIGRA"
  "TING\020\317^\022\033\n\026EGEC_MIGRATE_SAME_AREA\020\320^\022\032\n\025"
  "EGEC_BAD_MIGRATE_TYPE\020\321^\022\036\n\031EGEC_MIGRATE"
  "_AREA_TOO_NEW\020\322^\022\034\n\027EGEC_MIGRATE_RANK_LI"
  "MIT\020\323^\022!\n\034EGEC_MIGRATE_AREA_JOIN_LIMIT\020\324"
  "^\022 \n\033EGEC_MIGRATE_FUNCTION_CLOSE\020\325^\022 \n\033E"
  "GEC_ARENA_NOT_SET_SOLDIERS\020\343^\022#\n\036EGEC_AR"
  "ENA_ATTEMPTS_NOT_ENOUGH\020\344^\022\036\n\031EGEC_ARENA"
  "_TARGET_RECYCLE\020\345^\022\031\n\024EGEC_ARENA_SETTLEI"
  "NG\020\346^\022*\n%EGEC_ATTACK_NPC_TOWN_WITHOUT_AL"
  "LIANCE\020\261m\022\035\n\030EGEC_NPC_TOWN_LINK_ERROR\020\263m"
  "\022\036\n\031EGEC_KING_KILL_BAD_TARGET\020\264m\022$\n\037EGEC"
  "_NPC_TOWN_DECLARE_WAR_ERROR\020\265m\022 \n\033EGEC_N"
  "PC_TOWN_PROTECT_ERROR\020\266m\022+\n&EGEC_NPC_TOW"
  "N_DECLARE_WAR_MEMBER_LIMIT\020\267m\022(\n#EGEC_NP"
  "C_TOWN_DECLARE_WAR_NEED_NEAR\020\270m\022\036\n\031EGEC_"
  "NPC_TOWN_OCCUPY_FULL\020\271m\022*\n%EGEC_NPC_TOWN"
  "_DECLARE_WAR_LEVEL_LIMIT\020\272m\022\034\n\027EGEC_EXPL"
  "ORE_RADAR_FULL\020\334o\022\037\n\032EGEC_RESIDENTS_NOT_"
  "IN_CURE\020\231u\022\034\n\027EGEC_RESIDENTS_LOW_ELEC\020\232u"
  "\022&\n!EGEC_RESIDENTS_OVER_ELEC_CAPACITY\020\233u"
  "\022\037\n\032EGEC_BATTLE_REPORT_INVALID\020\201}\022\024\n\017EGE"
  "C_BATTLE_WIN\020\202}\022\034\n\027EGEC_BATTLE_LOG_INVAL"
  "ID\020\203}\022\030\n\022EGEC_ESCORT_UNLOCK\020\351\204\001\022\035\n\027EGEC_"
  "ESCORT_UNLOCK_SLOT\020\352\204\001\022#\n\035EGEC_ESCORT_ES"
  "CORTING_REFRESH\020\353\204\001\022!\n\033EGEC_ESCORT_REFRE"
  "SH_COST_ID\020\354\204\001\022\036\n\030EGEC_ESCORT_NOT_FIND_C"
  "AR\020\355\204\001\022#\n\035EGEC_ESCORT_ROB_SELF_ALLIANCE\020"
  "\356\204\001\022\034\n\026EGEC_ESCORT_BE_ROB_MAX\020\357\204\001\022%\n\037EGE"
  "C_WORLDBOSS_MAX_ATTACK_COUNT\020\360\204\001\022\"\n\034EGEC"
  "_ALLIANCE_DULE_SETTLEING\020\314\205\001\022&\n EGEC_ALL"
  "IANCE_DULE_CROSS_AREA_CD\020\315\205\001\022!\n\033EGEC_ALL"
  "IANCE_DULE_NO_RIVAL\020\317\205\001\022\034\n\026EGEC_CHAT_DAT"
  "A_EXPIRED\020\261\206\001*\034\n\tSdkMsgTip\022\017\n\013SMT_SUCCES"
  "S\020\000*D\n\014EAwardSource\022\030\n\024AWARD_SOURCE_DEFA"
  "ULT\020\000\022\032\n\026AWARD_SOURCE_DECOMPOSE\020\001*$\n\010ELR"
  "eason\022\030\n\024ELREASON_GM_ADD_ITEM\020\001*\233\002\n\020EBCl"
  "assification\022\n\n\006CASTLE\020\001\022\017\n\013GUARD_HOUSE\020"
  "\002\022\020\n\014BUILD_ATOWER\020\003\022\021\n\rSABER_BARRACK\020\005\022\021"
  "\n\rRIDER_BARRACK\020\006\022\022\n\016ARCHER_BARRACK\020\007\022\014\n"
  "\010HOSPITAL\020\013\022\020\n\014FOOD_FACTORY\020\r\022\020\n\014WOOD_FA"
  "CTORY\020\016\022\020\n\014IRON_FACTORY\020\017\022\017\n\013OIL_FACTORY"
  "\020\020\022\010\n\004TECH\020\021\022\013\n\007RECRUIT\020\024\022\022\n\016RESIDENT_CA"
  "BIN\020d\022\013\n\007CANTEEN\020e\022\021\n\rRESCUE_CENTER\020f*\217\001"
  "\n\010EBStatus\022\025\n\010INACTIVE\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004FRE"
  "E\020\000\022\013\n\007ON_FIRE\020\001\022\n\n\006CURING\020\002\022\014\n\010TRAINING"
  "\020\003\022\014\n\010STUDYING\020\004\022\r\n\tUPGRADING\020\005\022\014\n\010CREAT"
  "ING\020\006\022\020\n\014STUDYING_EXT\020\007*\202\001\n\016ESoldierSour"
  "ce\022\016\n\nSS_UNKNOWN\020\000\022\017\n\013SS_HOSPITAL\020\001\022\016\n\nS"
  "S_BARRACK\020\002\022\025\n\021SS_BARRACK_CANCEL\020\003\022\026\n\022SS"
  "_TATICALBUILDING\020\004\022\020\n\014SS_ITEM_GIVE\020\005*\237\001\n"
  "\010EChannel\022\013\n\007CL_AREA\020\001\022\017\n\013CL_ALLIANCE\020\002\022"
  "\014\n\010CL_GROUP\020\003\022\r\n\tCL_PLAYER\020\004\022\017\n\013CL_NEW_H"
  "AND\020\005\022\017\n\013CL_LANGUAGE\020\006\022\022\n\016CL_ALLIANCE_R4"
  "\020\007\022\026\n\022CL_ALLIANCE_NOTICE\020\010\022\n\n\006CL_MAX\020\t*\211"
  "\002\n\010EMoveTye\022\r\n\tMT_SENIOR\020\001\022\r\n\tMT_RANDOM\020"
  "\002\022\017\n\013MT_ALLIANCE\020\003\022\017\n\013MT_NEW_HAND\020\004\022\020\n\014M"
  "T_BURN_DOWN\020\005\022\013\n\007MT_BORN\020\006\022\023\n\017MT_FORCE_R"
  "ANDOM\020\007\022\026\n\022MT_ALLIANCE_ROOKIE\020\010\022\t\n\005MT_GM"
  "\020\t\022\024\n\020MT_JOIN_ALLIANCE\020\n\022\026\n\022MT_CREATE_AL"
  "LIANCE\020\013\022\026\n\022MT_ALLIANCE_LEADER\020\014\022\024\n\020MT_A"
  "LLIANCE_FREE\020\r\022\n\n\006MT_MAX\020\016*\242\001\n\nESceneTyp"
  "e\022\022\n\016EScene_Invalid\020\000\022\017\n\013EScene_Main\020\001\022\017"
  "\n\013EScene_Race\020\002\022\022\n\016EScene_NewHand\020\003\022\036\n\032E"
  "Scene_ClientNewbeeDungeon\020\004\022\030\n\024EScene_Du"
  "ngeonServer\020\005\022\020\n\014EScene_Arena\020\006*:\n\023EBroa"
  "dcastRangeType\022\016\n\nERange_All\020\001\022\023\n\017ERange"
  "_Alliance\020\002*\177\n\016EBroadcastType\022#\n\034EBroadc"
  "ast_OccupyNeuTralCity\020\301\331\266h\022!\n\032EBroadcast"
  "_AppointOfficial\020\302\331\266h\022%\n\036EBroadcast_Othe"
  "rAreaCityComeIn\020\235\351\266h*|\n\032EEquipMaterialsO"
  "perateType\022\024\n\020EOperate_Produce\020\001\022\030\n\024EOpe"
  "rate_StopProduce\020\002\022\026\n\022EOperate_Synthesis"
  "\020\003\022\026\n\022EOperate_Decompose\020\004*H\n\026EPlayerDat"
  "aRefreshType\022\r\n\tPDRT_NONE\020\000\022\017\n\013PDRT_WEEK"
  "LY\020\001\022\016\n\nPDRT_DAILY\020\002*}\n\026EHttpAddItemSour"
  "ceType\022\017\n\013EHAIST_None\020\000\022\023\n\017EHAIST_Activi"
  "ty\020\001\022\016\n\nEHAIST_VIP\020\002\022\024\n\020EHAIST_PUSH_GIFT"
  "\020\003\022\027\n\023EHAIST_DOLLAR_TOKEN\020\004*\207\001\n\014ETaskBig"
  "Type\022\025\n\021ETaskBigType_None\020\000\022\025\n\021ETaskBigT"
  "ype_Main\020\001\022\027\n\023ETaskBigType_Branch\020\002\022\030\n\024E"
  "TaskBigType_Chapter\020\003\022\026\n\022ETaskBigType_Da"
  "ily\020\004*A\n\007EGender\022\020\n\014EGender_None\020\000\022\020\n\014EG"
  "ender_Male\020\001\022\022\n\016EGender_Female\020\002*\"\n\006Mail"
  "ID\022\030\n\021MAILID_REWARD_MAX\020\241\260\204^*.\n\020ESpecial"
  "TaskData\022\032\n\026STD_CalcParamDiffScore\020\001"
  ;
static ::_pbi::once_flag descriptor_table_SGDefine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SGDefine_2eproto = {
    false, false, 27116, descriptor_table_protodef_SGDefine_2eproto,
    "SGDefine.proto",
    &descriptor_table_SGDefine_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_SGDefine_2eproto::offsets,
    nullptr, file_level_enum_descriptors_SGDefine_2eproto,
    file_level_service_descriptors_SGDefine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SGDefine_2eproto_getter() {
  return &descriptor_table_SGDefine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SGDefine_2eproto(&descriptor_table_SGDefine_2eproto);
namespace SGDefine {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ZKServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[0];
}
bool ZKServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[1];
}
bool server_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[2];
}
bool ItemResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeroBelongType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[3];
}
bool HeroBelongType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[4];
}
bool ItemSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 20005:
    case 20006:
    case 20007:
    case 20008:
    case 20009:
    case 22001:
    case 23000:
    case 24001:
    case 25000:
    case 26001:
    case 26002:
    case 29001:
    case 30001:
    case 30009:
    case 30011:
    case 31001:
    case 40010:
    case 50008:
    case 50009:
    case 50010:
    case 60007:
    case 60008:
    case 60009:
    case 60010:
    case 70001:
    case 80001:
    case 80002:
    case 80003:
    case 80004:
    case 80005:
    case 80006:
    case 90001:
    case 100001:
    case 110001:
    case 110002:
    case 120001:
    case 130001:
    case 130002:
    case 140001:
    case 140002:
    case 150000:
    case 160001:
    case 170001:
    case 170002:
    case 170003:
    case 170004:
    case 180000:
    case 190000:
    case 200000:
    case 210000:
    case 220000:
    case 270001:
    case 320001:
    case 330001:
    case 350001:
    case 380001:
    case 420001:
    case 430001:
    case 460001:
    case 460002:
    case 460003:
    case 500001:
    case 510001:
    case 530001:
    case 530002:
    case 530003:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[5];
}
bool RewardSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardNtfType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[6];
}
bool RewardNtfType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[7];
}
bool LanguageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 180000001:
    case 180000002:
    case 180000003:
    case 180000004:
    case 180000005:
    case 180000006:
    case 180000007:
    case 180000008:
    case 180000009:
    case 180000010:
    case 180000011:
    case 180000012:
    case 180000013:
    case 180000014:
    case 180000015:
    case 180000016:
    case 180000017:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackCase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[8];
}
bool PackCase_IsValid(int value) {
  switch (value) {
    case 10000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecruitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[9];
}
bool RecruitType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BannerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[10];
}
bool BannerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[11];
}
bool ShopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopRefreshType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[12];
}
bool ShopRefreshType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecruitFreeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[13];
}
bool RecruitFreeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[14];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourcePointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[15];
}
bool ResourcePointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[16];
}
bool MarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeroStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[17];
}
bool HeroStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeroSkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[18];
}
bool HeroSkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[19];
}
bool LoginModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 6:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KICK_PLAYER_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[20];
}
bool KICK_PLAYER_TYPE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlatformType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[21];
}
bool PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[22];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlatformWorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[23];
}
bool PlatformWorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CrossState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[24];
}
bool CrossState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BigAreaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[25];
}
bool BigAreaType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGIP_CMD_ERRORItemType_OfflineExp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[26];
}
bool BGIP_CMD_ERRORItemType_OfflineExp_IsValid(int value) {
  switch (value) {
    case -16:
    case -15:
    case -14:
    case -13:
    case -12:
    case -11:
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[27];
}
bool GenderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[28];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EImigrantState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[29];
}
bool EImigrantState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[30];
}
bool PowerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESdkTimeProcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[31];
}
bool ESdkTimeProcType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgTip_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[32];
}
bool MsgTip_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 51:
    case 52:
    case 71:
    case 72:
    case 81:
    case 82:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 501:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10028:
    case 10029:
    case 10030:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10035:
    case 10036:
    case 10037:
    case 10038:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 11012:
    case 11013:
    case 11014:
    case 11015:
    case 11016:
    case 11017:
    case 11018:
    case 11019:
    case 11020:
    case 11021:
    case 11022:
    case 11023:
    case 11024:
    case 11025:
    case 11026:
    case 11027:
    case 11028:
    case 11029:
    case 11030:
    case 11031:
    case 11032:
    case 11033:
    case 11034:
    case 11035:
    case 11036:
    case 11037:
    case 11038:
    case 11039:
    case 11040:
    case 11041:
    case 11042:
    case 11043:
    case 11045:
    case 11081:
    case 11082:
    case 11083:
    case 11084:
    case 11085:
    case 11086:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11105:
    case 11106:
    case 11111:
    case 11112:
    case 11113:
    case 11114:
    case 11115:
    case 11121:
    case 11122:
    case 11131:
    case 11132:
    case 11133:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11906:
    case 11907:
    case 11908:
    case 11910:
    case 11911:
    case 11912:
    case 11913:
    case 11914:
    case 11915:
    case 11916:
    case 11917:
    case 11918:
    case 11919:
    case 11920:
    case 11921:
    case 11950:
    case 11951:
    case 11952:
    case 11953:
    case 11954:
    case 11955:
    case 11956:
    case 11957:
    case 11958:
    case 11959:
    case 11960:
    case 11961:
    case 11962:
    case 12000:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12010:
    case 12015:
    case 12016:
    case 12017:
    case 12020:
    case 12021:
    case 12022:
    case 12023:
    case 12024:
    case 12025:
    case 12026:
    case 12027:
    case 12028:
    case 12029:
    case 12030:
    case 12031:
    case 12032:
    case 12033:
    case 12034:
    case 12035:
    case 12036:
    case 12037:
    case 12038:
    case 12039:
    case 12040:
    case 12041:
    case 12042:
    case 12043:
    case 12044:
    case 12045:
    case 12047:
    case 12048:
    case 12049:
    case 12050:
    case 12052:
    case 12053:
    case 12054:
    case 12055:
    case 12056:
    case 12057:
    case 12058:
    case 12059:
    case 12060:
    case 12061:
    case 12062:
    case 12063:
    case 12064:
    case 12065:
    case 12066:
    case 12067:
    case 12068:
    case 12069:
    case 12070:
    case 12071:
    case 12075:
    case 12076:
    case 12077:
    case 12078:
    case 12079:
    case 12080:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12115:
    case 12116:
    case 12117:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 14001:
    case 14003:
    case 14004:
    case 14005:
    case 14006:
    case 14007:
    case 14008:
    case 14009:
    case 14010:
    case 14300:
    case 15001:
    case 15002:
    case 15003:
    case 16001:
    case 16002:
    case 16003:
    case 17001:
    case 17002:
    case 17003:
    case 17004:
    case 17005:
    case 17006:
    case 17007:
    case 17008:
    case 17100:
    case 17101:
    case 17103:
    case 17201:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SdkMsgTip_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[33];
}
bool SdkMsgTip_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAwardSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[34];
}
bool EAwardSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[35];
}
bool ELReason_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[36];
}
bool EBClassification_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[37];
}
bool EBStatus_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESoldierSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[38];
}
bool ESoldierSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[39];
}
bool EChannel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMoveTye_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[40];
}
bool EMoveTye_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESceneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[41];
}
bool ESceneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastRangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[42];
}
bool EBroadcastRangeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[43];
}
bool EBroadcastType_IsValid(int value) {
  switch (value) {
    case 219000001:
    case 219000002:
    case 219002013:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEquipMaterialsOperateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[44];
}
bool EEquipMaterialsOperateType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerDataRefreshType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[45];
}
bool EPlayerDataRefreshType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHttpAddItemSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[46];
}
bool EHttpAddItemSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETaskBigType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[47];
}
bool ETaskBigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[48];
}
bool EGender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[49];
}
bool MailID_IsValid(int value) {
  switch (value) {
    case 197204001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESpecialTaskData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SGDefine_2eproto);
  return file_level_enum_descriptors_SGDefine_2eproto[50];
}
bool ESpecialTaskData_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SGDefine
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
